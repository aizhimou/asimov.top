<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Asimov&#39;s Blog</title>
        <link>https://asimov.top/</link>
        <description>Asimov&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>1224513626@qq.com (asimov)</managingEditor>
            <webMaster>1224513626@qq.com (asimov)</webMaster><lastBuildDate>Sat, 12 Jun 2021 21:23:46 &#43;0800</lastBuildDate>
            <atom:link href="https://asimov.top/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>FFmpeg 编码和编辑入门</title>
    <link>https://asimov.top/ffmpeg-encoding-and-editing-course/</link>
    <pubDate>Sat, 12 Jun 2021 21:23:46 &#43;0800</pubDate>
    <author>asimov</author>
    <guid>https://asimov.top/ffmpeg-encoding-and-editing-course/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://ahmadawais.com/wp-content/uploads/2021/05/FFmpeg.jpg" referrerpolicy="no-referrer">
            </div><p>本文主要内容翻译自一篇介绍 FFmpeg 入门知识的英文 Web 幻灯片，加入了一些个人理解与学习注释。</p>
<p>我翻译这篇文章的目的，一是学习 FFmpeg 相关的知识，二是练习英文翻译能力。但是受限于个人水平，有些英文专业名词翻译成中文有些怪异，碰到觉得翻译不好的地方，文中会附上原文词语，建议结合原文更好理解。</p>
<p>原文作者是一名视频质量与体验质量研究员，同时也是 Universität Ilmenau 的一名博士生和助理研究员。原文写得非常棒，文本质量和排版都比我的译文更好，建议有英文基础的朋友直接阅读原文，链接：<a href="https://slhck.info/ffmpeg-encoding-course" target="_blank" rel="noopener noreffer ">FFMPEG ENCODING AND EDITING COURSE</a></p>
<h2 id="课程目标">课程目标</h2>
<ul>
<li>基本概念</li>
<li>安装 ffmpeg 和相关工具</li>
<li>编码视频</li>
<li>使用过滤器（滤镜）</li>
<li>分析视频</li>
</ul>
<h2 id="前置要求">前置要求</h2>
<ul>
<li>这份幻灯片（原文是 web 幻灯片的形式）</li>
<li>已安装 ffmpeg、ffprobe、ffplay</li>
<li>一些样例视频，比如：<a href="http://distribution.bbb3d.renderfarming.net/video/mp4/bbb_sunflower_1080p_60fps_normal.mp4" target="_blank" rel="noopener noreffer ">Big Buck Bunny</a></li>
</ul>
<h2 id="资源">资源</h2>
<p>如果你需要一些样例视频用做测试，可以参考 VQEG (Video Quality Experts Group) 的说明：https://www.its.bldrdoc.gov/vqeg/video-datasets-and-organizations.aspx</p>
<h1 id="ffmpeg-简介">FFMPEG 简介</h1>
<h2 id="关于">关于</h2>
<ul>
<li>用于多媒体编辑、转换&hellip; 的免费开源软件</li>
<li>开始于 2000 年</li>
<li>持续维护和开发至今</li>
</ul>
<p>类似或相关（且有用）的框架：</p>
<ul>
<li><a href="https://www.imagemagick.org/" target="_blank" rel="noopener noreffer ">ImageMagick</a></li>
<li><a href="https://www.mltframework.org/" target="_blank" rel="noopener noreffer ">MLT Framework</a></li>
</ul>
<h2 id="工具">工具</h2>
<p>FFmpeg 是一系列软件包和类库的组合，包括：</p>
<ul>
<li>命令行工具：ffmpeg、ffprobe、ffplay</li>
<li>类库：libavformat, libavcodec, libavfilter, …</li>
</ul>
<p>其中类库被许多项目使用（比如 VLC、MLT Framework 等）并且可以在 C/C++ 代码中使用</p>
<h2 id="类库">类库</h2>
<ul>
<li>libavformat：读取和写入容器格式（AVI, MKV, MP4, …）</li>
<li>libavcodec：读取和写入编解码器（H.264, H.265, VP9, …）</li>
<li>libavfilter：各种个样的视频和音频过滤器</li>
<li>以及其他&hellip;</li>
</ul>
<p>关于如何以编程的方式使用类库的样例：
<a href="http://leixiaohua1020.github.io/#ffmpeg-development-examples" target="_blank" rel="noopener noreffer ">http://leixiaohua1020.github.io/#ffmpeg-development-examples</a></p>
<p>以及一些其他有用的（非 FFmpeg 的）类库：</p>
<ul>
<li>OpenCV: 面向更多类型的信号处理</li>
<li>Python: MoviePy, pyav, scikit-video</li>
</ul>
<h2 id="架构">架构</h2>
<p>简化的 FFmpeg 整体架构</p>
<p></p>
<h2 id="安装--编译">安装 / 编译</h2>
<table>
<thead>
<tr>
<th>安装方式</th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody>
<tr>
<td>从源码编译</td>
<td>可以自定义所有配置，工具，编解码器</td>
<td>费时间，升级困难</td>
</tr>
<tr>
<td>下载预编译版本</td>
<td>简单且快速</td>
<td>不提供所有编解码器，需要手动升级</td>
</tr>
<tr>
<td>包管理器安装</td>
<td>简单且快速</td>
<td>可能不是最新版本，也不提供所有编解码器</td>
</tr>
</tbody>
</table>
<ul>
<li>获取源代码和预编译版本：http://ffmpeg.org/download.html</li>
<li>Windows 预编译版本：https://ffmpeg.org/download.html#build-windows</li>
</ul>
<h2 id="获取帮助">获取帮助</h2>
<ul>
<li>官方文档：https://ffmpeg.org/ffmpeg-all.html</li>
<li>Wiki 知识库：http://trac.ffmpeg.org/wiki</li>
<li>IRC 聊天室：#ffmpeg</li>
<li>邮件列表：https://lists.ffmpeg.org/mailman/listinfo/ffmpeg-user/</li>
<li>Stack Overflow: <a href="https://stackoverflow.com/" target="_blank" rel="noopener noreffer ">https://stackoverflow.com/</a> and use #ffmpeg</li>
<li>Super User: <a href="http://superuser.com/" target="_blank" rel="noopener noreffer ">http://superuser.com/</a> and use #ffmpeg</li>
<li>… 或者问我</li>
</ul>
<h1 id="基础视频编码概念">基础视频编码概念</h1>
<h2 id="容器格式container-formats">容器格式（Container Formats）</h2>
<p>容器包含媒体数据。比如：</p>
<ul>
<li>MP4: MPEG-4 Part 14 容器，用于 H.264, H.264, AAC 音频, …</li>
<li>MKV: 可以包含几乎所有媒体编码格式的万能容器</li>
<li>WebM: MKV 容器的子集，主要用于网络媒体流</li>
<li>AVI: 传统容器</li>
</ul>
<p>在 FFmpeg 中查看支持的容器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ffmpeg -formats
</span></span><span class="line"><span class="cl">File formats:
</span></span><span class="line"><span class="cl"> D. <span class="o">=</span> Demuxing supported
</span></span><span class="line"><span class="cl"> .E <span class="o">=</span> Muxing supported
</span></span><span class="line"><span class="cl"> --
</span></span><span class="line"><span class="cl"> D  3dostr          3DO STR
</span></span><span class="line"><span class="cl">  E 3g2             3GP2 <span class="o">(</span>3GPP2 file format<span class="o">)</span>
</span></span><span class="line"><span class="cl">  E 3gp             3GP <span class="o">(</span>3GPP file format<span class="o">)</span>
</span></span><span class="line"><span class="cl"> D  4xm             4X Technologies
</span></span><span class="line"><span class="cl">  E a64             a64 - video <span class="k">for</span> Commodore <span class="m">64</span>
</span></span><span class="line"><span class="cl"> D  aa              Audible AA format files
</span></span><span class="line"><span class="cl"> ...
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="编解码器codecs">编解码器（Codecs）</h2>
<ul>
<li>编解码器 = 编码器 / 解码器</li>
<li>如何编码和解码视频、音频&hellip;的规范</li>
<li>通常不是如何编码 / 压缩数据的规范</li>
<li>有时候 “编解码器” 被用于直接指代 编码 / 解码的软件</li>
</ul>
<p>译者按：Codec 可以理解为编码协议，不同的协议处理数据（音视频）的规则不一样，协议有免费开源的，自然也有商用私有的。</p>
<p>查看 FFmpeg 支持的编解码器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ffmpeg -codecs
</span></span><span class="line"><span class="cl">Codecs:
</span></span><span class="line"><span class="cl"> D..... <span class="o">=</span> Decoding supported
</span></span><span class="line"><span class="cl"> .E.... <span class="o">=</span> Encoding supported
</span></span><span class="line"><span class="cl"> ..V... <span class="o">=</span> Video codec
</span></span><span class="line"><span class="cl"> ..A... <span class="o">=</span> Audio codec
</span></span><span class="line"><span class="cl"> ..S... <span class="o">=</span> Subtitle codec
</span></span><span class="line"><span class="cl"> ...I.. <span class="o">=</span> Intra frame-only codec
</span></span><span class="line"><span class="cl"> ....L. <span class="o">=</span> Lossy compression
</span></span><span class="line"><span class="cl"> .....S <span class="o">=</span> Lossless compression
</span></span><span class="line"><span class="cl"> -------
</span></span><span class="line"><span class="cl"> D.VI.. 012v                 Uncompressed 4:2:2 10-bit
</span></span><span class="line"><span class="cl"> D.V.L. 4xm                  4X Movie
</span></span><span class="line"><span class="cl"> D.VI.S 8bps                 QuickTime 8BPS video
</span></span><span class="line"><span class="cl"> .EVIL. a64_multi            Multicolor charset <span class="k">for</span> Commodore <span class="m">64</span> <span class="o">(</span>encoders: a64multi <span class="o">)</span>
</span></span><span class="line"><span class="cl"> .EVIL. a64_multi5           Multicolor charset <span class="k">for</span> Commodore 64, extended with 5th color <span class="o">(</span>colram<span class="o">)</span> <span class="o">(</span>encoders: a64multi5 <span class="o">)</span>
</span></span><span class="line"><span class="cl"> D.V..S aasc                 Autodesk RLE
</span></span><span class="line"><span class="cl"> D.VIL. aic                  Apple Intermediate Codec
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="最重要的有损编解码器lossy-codecs">最重要的有损编解码器（Lossy Codecs）</h2>
<p>目前主要使用的，由 ITU / ISO 标准化：</p>
<ul>
<li>🎥 H.262 / MPEG-2 Part H: 主要是广播、电视使用，用于向后兼容</li>
<li>🎥 H.264 / MPEG-4 Part 10: 当今视频编码器的事实标准（2018年）</li>
<li>🎥 H.265 / HEVC / MPEG-H: H.264 的继任者，视频质量提升 50%</li>
<li>🔊 MP3 / MPEG-2 Audio Layer III: 曾经是音频编码的事实标准</li>
<li>🔊 AAC / ISO/IEC 14496-3:2009: 高级音频编码标准</li>
</ul>
<p>免授权费（免版权的）主要竞争者：</p>
<ul>
<li>🎥 VP8: 由 Google 提出的开源免费编解码器（如今使用并不多）</li>
<li>🎥 VP9: VP8 的继任者，几乎和 H.265 一样好</li>
<li>🎥 AV1: VP9 的继任者，声称比 H.265 更好</li>
</ul>
<h2 id="最重要的无损编解码器lossless-codecs">最重要的无损编解码器（Lossless Codecs）</h2>
<p>无损编解码器在存档、编辑&hellip;领域非常有用
无损编码 = 在较小的文件体积下没有压缩损失</p>
<ul>
<li>🎥 Raw YUV, HuffYUV, FFV1, ffvhuff …</li>
<li>🔊 Raw PCM, FLAC, ALAC, …</li>
</ul>
<p>当然，还有 “视觉无损” 编解码器：</p>
<ul>
<li>🎥 Apple ProRes, Avid DNxHD, JPEG2000, high-quality H.264/H.265, &hellip;</li>
<li>High bitrate and usually only I-frames（高码率帧内压缩）</li>
</ul>
<h2 id="编码器encoders">编码器（Encoders）</h2>
<ul>
<li>编码器是输出编码后字节流的实际软件</li>
<li>编码器会影响视频的质量和性能，一些编码器会好于另一些（有些免费，有些不免费）</li>
</ul>
<p>译者按：Encoder 可以理解为 Codec（编码协议）的具体实现方式，不同的实现方式各有优劣，有免费开源的实现，也有商用私有的实现。</p>
<p>例如：</p>
<ul>
<li>🎥 libx264: 最受欢迎的 H.264 编码器</li>
<li>🎥 NVENC: NVIDIA GPU 专用的 H.264 编码器</li>
<li>🎥 libx265: 免费开源的 HEVC（H.265）编码器</li>
<li>🎥 libvpx: Google 推出的 VP8 和 VP9 编码器</li>
<li>🎥 libaom: AV1 编码器</li>
<li>🔊 libfdk-aac: AAC 编码器</li>
<li>🔊 aac: 原生（默认） FFmpeg AAC 编码器</li>
<li>…</li>
</ul>
<p>总的来说，编码器方面有很多竞争。</p>
<p>查看 FFmpeg 支持的编码器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ffmpeg -encoders
</span></span><span class="line"><span class="cl">Encoders:
</span></span><span class="line"><span class="cl"> V..... <span class="o">=</span> Video
</span></span><span class="line"><span class="cl"> A..... <span class="o">=</span> Audio
</span></span><span class="line"><span class="cl"> S..... <span class="o">=</span> Subtitle
</span></span><span class="line"><span class="cl"> .F.... <span class="o">=</span> Frame-level multithreading
</span></span><span class="line"><span class="cl"> ..S... <span class="o">=</span> Slice-level multithreading
</span></span><span class="line"><span class="cl"> ...X.. <span class="o">=</span> Codec is experimental
</span></span><span class="line"><span class="cl"> ....B. <span class="o">=</span> Supports draw_horiz_band
</span></span><span class="line"><span class="cl"> .....D <span class="o">=</span> Supports direct rendering method <span class="m">1</span>
</span></span><span class="line"><span class="cl"> ------
</span></span><span class="line"><span class="cl"> V..... a64multi             Multicolor charset <span class="k">for</span> Commodore <span class="m">64</span> <span class="o">(</span>codec a64_multi<span class="o">)</span>
</span></span><span class="line"><span class="cl"> V..... a64multi5            Multicolor charset <span class="k">for</span> Commodore 64, extended with 5th color <span class="o">(</span>colram<span class="o">)</span> <span class="o">(</span>codec a64_multi5<span class="o">)</span>
</span></span><span class="line"><span class="cl"> V..... alias_pix            Alias/Wavefront PIX image
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="像素格式pixel-formats">像素格式（Pixel Formats）</h2>
<ul>
<li>视频流中原始像素的表示</li>
<li>指定亮度 / 色彩和饱和度的采样顺序</li>
</ul>
<p></p>
<p>查看 FFmpeg 支持的像素格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">➜  ~ ffmpeg -pix_fmts --hide_banner
</span></span><span class="line"><span class="cl">Pixel formats:
</span></span><span class="line"><span class="cl">I.... <span class="o">=</span> Supported Input  format <span class="k">for</span> conversion
</span></span><span class="line"><span class="cl">.O... <span class="o">=</span> Supported Output format <span class="k">for</span> conversion
</span></span><span class="line"><span class="cl">..H.. <span class="o">=</span> Hardware accelerated format
</span></span><span class="line"><span class="cl">...P. <span class="o">=</span> Paletted format
</span></span><span class="line"><span class="cl">....B <span class="o">=</span> Bitstream format
</span></span><span class="line"><span class="cl">FLAGS NAME            NB_COMPONENTS BITS_PER_PIXEL BIT_DEPTHS
</span></span><span class="line"><span class="cl">-----
</span></span><span class="line"><span class="cl">IO... yuv420p                <span class="m">3</span>             <span class="m">12</span>      8-8-8
</span></span><span class="line"><span class="cl">IO... yuyv422                <span class="m">3</span>             <span class="m">16</span>      8-8-8
</span></span><span class="line"><span class="cl">IO... rgb24                  <span class="m">3</span>             <span class="m">24</span>      8-8-8
</span></span><span class="line"><span class="cl">IO... bgr24                  <span class="m">3</span>             <span class="m">24</span>      8-8-8
</span></span><span class="line"><span class="cl">IO... yuv422p                <span class="m">3</span>             <span class="m">16</span>      8-8-8
</span></span><span class="line"><span class="cl">IO... yuv444p                <span class="m">3</span>             <span class="m">24</span>      8-8-8
</span></span><span class="line"><span class="cl">IO... yuv410p                <span class="m">3</span>              <span class="m">9</span>      8-8-8
</span></span><span class="line"><span class="cl">IO... yuv411p                <span class="m">3</span>             <span class="m">12</span>      8-8-8
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><p>译者按：这块我也没看明白，先放着吧 😂，我比较关心视频编码（数据压缩）的部分</p>
<h1 id="用-ffmpeg-命令行工具编码">用 FFmpeg 命令行工具编码</h1>
<h2 id="基本语法">基本语法</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg &lt;global-options&gt; &lt;input-options&gt; -i &lt;input&gt; &lt;output-options&gt; &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>全局参数（global-options）用于日志输出，覆盖文件等</li>
<li>输入参数（input-options）用于读取文件</li>
<li>输出参数（output-options）用于：
<ul>
<li>转换（编码格式，视频质量等）</li>
<li>过滤器（filtering）</li>
<li>流映射（stream mapping）</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<p>完整的帮助 / 参考文档：<code>ffmpeg -h full</code> 或者 <code>man ffmpeg</code> 但是内容非常非常多！</p>
<h2 id="转码和转换transcoding-and-transmuxing">转码和转换（TRANSCODING AND TRANSMUXING）</h2>
<p>从一种编码格式转码到另一种编码格式（Transcoding），比如用 libx264 编码器转为 H.264 编码格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -c:v libx264 output.mp4
</span></span></code></pre></td></tr></table>
</div>
</div><p>从一种视频容器转换为另一种视频容器，不用重新编码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i input.mp4 -c copy output.mkv
</span></span></code></pre></td></tr></table>
</div>
</div><p>ffmpeng 会从输入中获取一个视频、音频和字幕流并将其映射到输出文件中。</p>
<p>注释：</p>
<ul>
<li>-c 设置编码器（参考 ffmpeg -encoders)</li>
<li>-c 复制比特流（copy only copies bitstream）</li>
<li>-c:v 设置视频编码器</li>
<li>-c:a 设置音频编码器</li>
<li>-an 和 -vn 分别是禁用音频和视频流</li>
</ul>
<h3 id="转码的背后transcoding-background">转码的背后（TRANSCODING BACKGROUND）</h3>
<p>节选自 <a href="http://ffmpeg.org/ffmpeg-all.html" target="_blank" rel="noopener noreffer ">http://ffmpeg.org/ffmpeg-all.html</a>：</p>
<blockquote>
<p>ffmpeg […] read[s] input files and get packets containing encoded data from them. When there are multiple input files, ffmpeg tries to keep them synchronized […].
Encoded packets are then passed to the decoder. […] The decoder produces uncompressed frames […] which can be processed further by filtering […]. After filtering, the frames are passed to the encoder, which encodes them and outputs encoded packets. Finally those are passed to the muxer, which writes the encoded packets to the output file.</p>
</blockquote>
<p>译者按：这段专业名词太多，尝试翻译了几次都感觉太僵硬太奇怪了。其实就是前面那个架构图的文字描述。</p>
<p>大概意思是：ffmpeg 从文件中读取编码过的数据包，如果有多个文件，ffmpeg 会尝试同步多个文件。然后这些编码过的数据包（encoded packets）会被发送到解码器（decoder），解码器将这些数据包解码为原始视频帧（uncompressed frames），然后就可以使用各种过滤器（filters）来处理这些视频帧（frames），然后这些处理过后的视频帧率会被发送到编码器（encoder），编码器会将他们编码为数据包（encoded packets），最后这些数据包会被发送到混流器（muxer），最终混流器将这些数据包输出为文件。</p>
<h2 id="查找和剪切seeking-and-cutting">查找和剪切（SEEKING AND CUTTING）</h2>
<p>从 &lt;起始点（start）&gt; 用 &lt;持续时间（duration）&gt; 或者 &lt;结束点（end）&gt; 来剪切视频</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -ss &lt;start&gt; -i &lt;input&gt; -t &lt;duration&gt; -c copy &lt;output&gt;
</span></span><span class="line"><span class="cl">ffmpeg -ss &lt;start&gt; -i &lt;input&gt; -to &lt;end&gt; -c copy &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -ss 00:01:50 -i &lt;input&gt; -t 10.5 -c copy &lt;output&gt;
</span></span><span class="line"><span class="cl">ffmpeg -ss 2.5 -i &lt;input&gt; -to <span class="m">10</span> -c copy &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用-seekng-注意事项">使用 SEEKNG 注意事项</h3>
<ul>
<li>重新编码视频时，seeking 总是可以精确到时间戳</li>
<li>当拷贝视频流而没有经过重新编码时（-c copy），ffmpeg 可能会包含未显示但是必要的帧</li>
<li>使用 <code>-c copy</code> 剪切视频时，可能会产生黑帧开头的视频（在某些播放器上）</li>
<li>详情可以查看：
<ul>
<li><a href="http://trac.ffmpeg.org/wiki/Seeking" target="_blank" rel="noopener noreffer ">http://trac.ffmpeg.org/wiki/Seeking</a></li>
<li><a href="https://superuser.com/questions/138331/using-ffmpeg-to-cut-up-video" target="_blank" rel="noopener noreffer ">https://superuser.com/questions/138331/using-ffmpeg-to-cut-up-video</a></li>
</ul>
</li>
</ul>
<p>译者按：之所以在剪切视频时，转码于不转码存在时间准确性上的差别，是因为转码时，原视频的每一帧都会被 ffmpeg 读取出来（也就是 decode），因此可以准确的定位到时间点，但是如果没有转码，直接复制视频流的时候，ffmpeg 并不会逐帧分析视频，而是采用“关键帧”来定位时间，当设定的时间点上没有关键帧时，就会出现一些时间偏差。</p>
<h2 id="设置质量">设置质量</h2>
<ul>
<li>输出文件的质量取决于编码器默认设置于原材料（也就是原视频）的质量</li>
<li>不要在未设置任何质量水平的情况下进行编码</li>
<li>通常情况下，你需要选择一个目标比特率或者质量水平</li>
<li>目标比特率取决于视频的类型，大小和帧率</li>
</ul>
<h3 id="设置质量的参数">设置质量的参数</h3>
<p>可能会使用到的参数（仅示例）</p>
<ul>
<li>-b:v 或者 -b:a 设置比特率
<ul>
<li>比如：-b:v 1000K = 1000kbit/s, -b:v 8M = 8Mbit/s</li>
</ul>
</li>
<li>q:v 或者 -q:a 设置固定质量参数
<ul>
<li>比如：-q:a 2 设置为原生 AAC 编码器</li>
</ul>
</li>
</ul>
<p>一些编码方式的示例：</p>
<ul>
<li>-crf 用来设置 libx264/libx265 的 恒定码率因子（<a href="http://slhck.info/video/2017/02/24/crf-guide.html" target="_blank" rel="noopener noreffer ">Constant Rate Factor</a>）</li>
<li>vbr 为 FDK-AAC 编码器设置固定质量</li>
<li>还有很多其他参数，可以使用 <code>ffmpeg -h encoder=libx264 for examples</code> 查看，如下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">➜  ~ ffmpeg -h <span class="nv">encoder</span><span class="o">=</span>libx264 <span class="k">for</span> examples -hide_banner
</span></span><span class="line"><span class="cl">Encoder libx264 <span class="o">[</span>libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10<span class="o">]</span>:
</span></span><span class="line"><span class="cl">    General capabilities: dr1 delay threads 
</span></span><span class="line"><span class="cl">    Threading capabilities: other
</span></span><span class="line"><span class="cl">    Supported pixel formats: yuv420p yuvj420p yuv422p yuvj422p yuv444p yuvj444p nv12 nv16 nv21 yuv420p10le yuv422p10le yuv444p10le nv20le gray gray10le
</span></span><span class="line"><span class="cl">libx264 AVOptions:
</span></span><span class="line"><span class="cl">  -preset            &lt;string&gt;     E..V....... Set the encoding preset <span class="o">(</span>cf. x264 --fullhelp<span class="o">)</span> <span class="o">(</span>default <span class="s2">&#34;medium&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  -tune              &lt;string&gt;     E..V....... Tune the encoding params <span class="o">(</span>cf. x264 --fullhelp<span class="o">)</span>
</span></span><span class="line"><span class="cl">  -profile           &lt;string&gt;     E..V....... Set profile restrictions <span class="o">(</span>cf. x264 --fullhelp<span class="o">)</span> 
</span></span><span class="line"><span class="cl">  -fastfirstpass     &lt;boolean&gt;    E..V....... Use fast settings when encoding first pass <span class="o">(</span>default <span class="nb">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  -level             &lt;string&gt;     E..V....... Specify level <span class="o">(</span>as defined by Annex A<span class="o">)</span>
</span></span><span class="line"><span class="cl">  -passlogfile       &lt;string&gt;     E..V....... Filename <span class="k">for</span> <span class="m">2</span> pass stats
</span></span><span class="line"><span class="cl">  -wpredp            &lt;string&gt;     E..V....... Weighted prediction <span class="k">for</span> P-frames
</span></span><span class="line"><span class="cl">  -a53cc             &lt;boolean&gt;    E..V....... Use A53 Closed Captions <span class="o">(</span><span class="k">if</span> available<span class="o">)</span> <span class="o">(</span>default <span class="nb">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  -x264opts          &lt;string&gt;     E..V....... x264 options
</span></span><span class="line"><span class="cl">  -crf               &lt;float&gt;      E..V....... Select the quality <span class="k">for</span> constant quality mode <span class="o">(</span>from -1 to FLT_MAX<span class="o">)</span> <span class="o">(</span>default -1<span class="o">)</span>
</span></span><span class="line"><span class="cl">  -crf_max           &lt;float&gt;      E..V....... In CRF mode, prevents VBV from lowering quality beyond this point. <span class="o">(</span>from -1 to FLT_MAX<span class="o">)</span> <span class="o">(</span>default -1<span class="o">)</span>
</span></span><span class="line"><span class="cl">  -qp                &lt;int&gt;        E..V....... Constant quantization parameter rate control method <span class="o">(</span>from -1 to INT_MAX<span class="o">)</span> <span class="o">(</span>default -1<span class="o">)</span>
</span></span><span class="line"><span class="cl">  -aq-mode           &lt;int&gt;        E..V....... AQ method <span class="o">(</span>from -1 to INT_MAX<span class="o">)</span> <span class="o">(</span>default -1<span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="什么是-crf">什么是 CRF？</h3>
<ul>
<li>CRF = <a href="http://slhck.info/video/2017/02/24/crf-guide.html" target="_blank" rel="noopener noreffer ">Constant Rate Factor</a></li>
<li>在整个编码过程中，保持恒定的质量</li>
<li>在不太注重文件大小的情况下，适合以固定的质量存储视频</li>
</ul>
<h3 id="示例转码为-h264part-1">示例：转码为 H.264，Part 1</h3>
<p>以固定质量（CRF）编码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -c:v libx264 -crf <span class="m">23</span> -c:a aac -b:a 128k output.mkv
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对 H.264 编码，CRF 在 18 到 28 之间看起来“比较好”，CRF 值越低视频质量越好。（ HEVC 和 VP9 编码的 CRF 值不同）</p>
<h3 id="示例转码为-h264part-2">示例：转码为 H.264，Part 2</h3>
<p>双重编码（Two-pass）模式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -y -i &lt;input&gt; -c:v libx264 -b:v 8M -pass <span class="m">1</span> -c:a aac -b:a 128k -f mp4 /dev/null
</span></span><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -c:v libx264 -b:v 8M -pass <span class="m">2</span> -c:a aac -b:a 128k output.mp4
</span></span></code></pre></td></tr></table>
</div>
</div><p>Windows 用户：用 <code>nul</code> 代替 <code>/dev/null</code></p>
<p>更多细节，参考：<a href="https://trac.ffmpeg.org/wiki/Encode/H.264" target="_blank" rel="noopener noreffer ">https://trac.ffmpeg.org/wiki/Encode/H.264</a></p>
<h2 id="码率控制">码率控制</h2>
<p>不同的控制方式：</p>
<ul>
<li>固定码率（Constant Bitrate：CBR）</li>
<li>动态码率（Variable Bitrate：VBR）
<ul>
<li>平均码率（Average Bitrate：ABR）</li>
<li>恒定质量参数（Constant quantization parameter：CQP）</li>
<li>基于心里视觉特征的恒定质量，比如 x264/x265/libvpx-vp9 编码器中使用 CRF（Constant quality, based on psychovisual properties）</li>
<li>限制型码率（Constrained Bitrate：VBV）</li>
</ul>
</li>
</ul>
<p>具体在哪种情况下使用哪种码率模式，参考：<a href="https://slhck.info/video/2017/03/01/rate-control.html" target="_blank" rel="noopener noreffer ">https://slhck.info/video/2017/03/01/rate-control.html</a></p>
<p><strong>重要说明：合适的码率取决于内容特征！</strong></p>
<p>译者按：对视频来说，码率并非越高越好，不同内容特征的视频对码率的要求并不一样，具体可以参考这篇文章：<a href="https://sspai.com/post/66001" target="_blank" rel="noopener noreffer ">什么决定了你看到的画质</a></p>
<h3 id="码率控制示例">码率控制示例</h3>
<p></p>
<ul>
<li>不同码率控制模式下，帧大小随时间变化图（已平滑化处理）</li>
<li>注意 ABR 模式下，在一开始对码率的错误估计</li>
</ul>
<h3 id="速度-vs-质量-vs-文件大小speed-vs-quality-vs-file-size">速度 VS 质量 VS 文件大小（SPEED VS. QUALITY VS. FILE SIZE）</h3>
<p>有损编码模式总是在这三者之间选择</p>
<p></p>
<p>例如：</p>
<ul>
<li>你可以让视频质量又好，编码又快，但是输出文件会很大</li>
<li>你可以让视频质量又好，文件又小，但是编码速度会很慢</li>
<li>你可以让文件又小，编码又快，但是视频质量就会比较差</li>
</ul>
<p>编者按：凡事需要做抉择的地方，不可能三角总在那儿等着你。视频编码时如何平衡速度、质量和文件大小，是最重要也是最复杂的课题之一，后面会学习/撰写/翻译更多的文章来介绍。</p>
<h3 id="x264-编码器中的速度质量预设">X264 编码器中的速度/质量预设</h3>
<p>使用预设来选择 libx264 的编码速度</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -c:v libx264 -crf <span class="m">23</span> -preset ultrafast -an output.mkv
</span></span><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -c:v libx264 -crf <span class="m">23</span> -preset medium -an output.mkv
</span></span><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -c:v libx264 -crf <span class="m">23</span> -preset veryslow -an output.mkv
</span></span></code></pre></td></tr></table>
</div>
</div><p>所有预设：ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow</p>
<p>同等质量下，一些编码速度于文件体积的对比样例：</p>
<table>
<thead>
<tr>
<th>Preset</th>
<th>Encoding Time</th>
<th>File Size</th>
</tr>
</thead>
<tbody>
<tr>
<td>ultrafast</td>
<td>4.85s</td>
<td>15M</td>
</tr>
<tr>
<td>medium</td>
<td>24.13s</td>
<td>5.2M</td>
</tr>
<tr>
<td>veryslow</td>
<td>112.23s</td>
<td>4.9M</td>
</tr>
</tbody>
</table>
<h2 id="改变帧率">改变帧率</h2>
<p>简单的通过丢弃帧和复制帧的方式来改变帧率：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -r <span class="m">24</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>更复杂的方法涉及到过滤器（filter）参考 fps, mpdecimate, minterpolate filters:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -filter:v <span class="nv">fps</span><span class="o">=</span><span class="m">24</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="轨道映射stream-mapping">轨道映射（STREAM MAPPING）</h2>
<p>每一个文件都有一个唯一的 ID，从 0 开始</p>
<p>例如：</p>
<ul>
<li><code>0:0</code> 是第一个输入文件的第一条轨道（Steam）</li>
<li><code>0:1</code> 是第一个输入文件的第二条轨道</li>
<li><code>2:a:0</code> 是第三个输入文件的第一条音轨</li>
<li>&hellip;</li>
</ul>
<p>你可以将输入文件的轨道映射到输出文件中（map input streams to output）例如：将音频添加到视频中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i input.mp4 -i input.m4a -c copy -map 0:v:0 -map 1:a:0 output.mp4
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多细节请参考：<a href="http://trac.ffmpeg.org/wiki/Map" target="_blank" rel="noopener noreffer ">http://trac.ffmpeg.org/wiki/Map</a></p>
<h2 id="简单过滤器simple-filtering">简单过滤器（SIMPLE FILTERING）</h2>
<p>FFmpeg 有很多视频、音频、字幕的过滤器（filter）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -filter:v <span class="s2">&#34;&lt;filter1&gt;,&lt;filter2&gt;,&lt;filter3&gt;&#34;</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个过滤器（滤镜）有一个名称，一些可选项，以及一些预设参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">-filter:v &lt;name&gt;<span class="o">=</span>&lt;option1&gt;<span class="o">=</span>&lt;value1&gt;:&lt;option2&gt;<span class="o">=</span>&lt;value2&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="缩放scaling">缩放（SCALING）</h3>
<p>缩放到 320 x 240</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -vf <span class="s2">&#34;scale=w=320:h=240&#34;</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>缩放到高度 240 且保持纵横比可被 2 整除</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -vf <span class="nv">scale</span><span class="o">=</span><span class="nv">w</span><span class="o">=</span>-2:h<span class="o">=</span><span class="m">240</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>缩放到 1280 x 720，如果需要的话缩放到更小</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -vf <span class="s2">&#34;scale=1280:720:force_original_aspect_ratio=decrease&#34;</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多关于缩放的技巧：</p>
<ul>
<li><a href="http://trac.ffmpeg.org/wiki/Scaling%20%28resizing%29%20with%20ffmpeg" target="_blank" rel="noopener noreffer ">http://trac.ffmpeg.org/wiki/Scaling%20(resizing)%20with%20ffmpeg</a></li>
<li><a href="https://superuser.com/questions/547296/" target="_blank" rel="noopener noreffer ">https://superuser.com/questions/547296/</a></li>
</ul>
<h3 id="填充padding">填充（PADDING）</h3>
<p>填充黑边到文件中，例如将 1920 x 800 的视频填充到 1920 x 1080：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -vf <span class="s2">&#34;pad=1920:1080:(ow-iw)/2:(oh-ih)/2&#34;</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>使用备注：</p>
<ul>
<li>可以使用数学表达式</li>
<li>ow 和 oh 是输出文件的宽和高</li>
<li>iw 和 ih 是输入文件的宽和高</li>
</ul>
<h3 id="淡入淡出fading">淡入淡出（FADING）</h3>
<p>在特定的时间点使用指定持续时间的简单淡入淡出效果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -filter:v <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;fade=t=in:st=0:d=5,fade=t=out:st=30:d=5&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>译者按：使用 FFmpeg 命令行时，有时一行代码太长不方便编写和查看，就可以使用换行符分行编写，不同的 Shell 有不同的换行符，例如 “\” 是 Bash 的换行符，Windows 下 CMD 的换行符是 “^”，请注意替换。</p>
<h3 id="文本绘图--文字水印drawing-text">文本绘图 / 文字水印（DRAWING TEXT）</h3>
<p>用于在视频上加上文本的复杂系统：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input&gt; -vf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="nv">drawtext</span><span class="o">=</span><span class="s2">&#34;text=&#39;Test Text&#39;:x=100:y=50:\
</span></span></span><span class="line"><span class="cl"><span class="s2">fontsize=24:fontcolor=yellow:box=1:boxcolor=red&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>&lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>字体、大小、位置、颜色&hellip;都有都有各种相关的参数</li>
<li>文字烧录功能可以拓展，例如按帧数或者时间码烧录</li>
</ul>
<p>更多详细信息，参考：<a href="http://ffmpeg.org/ffmpeg-all.html#drawtext-1" target="_blank" rel="noopener noreffer ">http://ffmpeg.org/ffmpeg-all.html#drawtext-1</a></p>
<h2 id="复杂过滤器complex-filtering">复杂过滤器（COMPLEX FILTERING）</h2>
<p>复杂过滤器不止一个输入或者输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input1&gt; -i &lt;input2&gt; -filter_complex <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s2">&#34;[0:v:0][1:v:0]overlay[outv]&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -map <span class="s2">&#34;[outv]&#34;</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>过程拆解：</p>
<ul>
<li>指定输入到过滤链（filterchain）（例如 [0:v:0][1:v:0]）</li>
<li>指定过滤链中的滤镜（例如：overlay）</li>
<li>指定过滤链的输出标签（例如：[outv]）</li>
<li>映射输出标签到输出文件</li>
<li>使用 ; 一次可以同时使用多个过滤链</li>
</ul>
<p>更多详细内容，参考：<a href="http://ffmpeg.org/ffmpeg-all.html#Filtergraph-syntax-1" target="_blank" rel="noopener noreffer ">http://ffmpeg.org/ffmpeg-all.html#Filtergraph-syntax-1</a></p>
<h3 id="拼接轨道concatenating-streams">拼接轨道（CONCATENATING STREAMS）</h3>
<p>解码三个视频/音频轨道并拼接到另一个中：</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;input1&gt; -i &lt;input2&gt; -i &lt;input3&gt; -filter_complex <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s2">&#34;[0:0][0:1][1:0][1:1][2:0][2:1]concat=n=3:v=1:a=1[outv][outa]&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -map <span class="s2">&#34;[outv]&#34;</span> -map <span class="s2">&#34;[outa]&#34;</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多信息，参考：<a href="http://trac.ffmpeg.org/wiki/Concatenate" target="_blank" rel="noopener noreffer ">http://trac.ffmpeg.org/wiki/Concatenate</a>（也适用于其他方法）</p>
<h3 id="时间线编辑timeline-editing">时间线编辑（TIMELINE EDITING）</h3>
<p>仅在特定时间点启用过滤器</p>
<p>例如：</p>
<ul>
<li>在左上角显示水印</li>
<li>仅在第 1 和第 2 秒显示</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i &lt;video&gt; -i &lt;watermark&gt; -filter_complex <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s2">&#34;[0:v][1:v]overlay=10:10:enable=&#39;between(t,1,2)&#39;[outv]&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -map <span class="s2">&#34;[outv]&#34;</span> &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多用法，请参考：<a href="http://ffmpeg.org/ffmpeg-all.html#Timeline-editing" target="_blank" rel="noopener noreffer ">http://ffmpeg.org/ffmpeg-all.html#Timeline-editing</a></p>
<h2 id="其他过滤器">其他过滤器</h2>
<p>除了前面介绍的那些过滤器，ffmpeg 生态中还有很多很多其他的过滤器。</p>
<p>例如：</p>
<ul>
<li>使用选择过滤器检测场景变化</li>
<li>去除水印（delogo）</li>
<li>模糊、边缘检测和卷积滤波器</li>
<li>视频稳定</li>
<li>矢量示波器、直方图和其他信息</li>
<li>色度和 alpha 控制</li>
<li>字幕编辑</li>
<li>&hellip;</li>
</ul>
<h2 id="计算简单的质量指标">计算简单的质量指标</h2>
<h3 id="psnr-peak-signal-to-noise-ratio">PSNR (Peak Signal To Noise Ratio)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ffmpeg -i &lt;degraded&gt; -i &lt;reference&gt; -filter_complex psnr -f null /dev/null
</span></span><span class="line"><span class="cl"><span class="o">[</span>Parsed_psnr_0 @ 0x7fdb187045c0<span class="o">]</span> PSNR y:33.437789 u:39.814416 v:39.319141 average:34.698320 min:29.305186 max:inf
</span></span></code></pre></td></tr></table>
</div>
</div><p>译者按：PSNR 中文标准译名为“峰值信噪比”，是一个比较成熟的衡量压缩影像信噪比的指标，详情可以参考 <a href="https://zh.wikipedia.org/zh-cn/%E5%B3%B0%E5%80%BC%E4%BF%A1%E5%99%AA%E6%AF%94" target="_blank" rel="noopener noreffer ">中文维基百科：峰值信噪比</a></p>
<h3 id="ssim-structural-similarityhttpsenwikipediaorgwikissim">SSIM (<a href="https://en.wikipedia.org/wiki/SSIM" target="_blank" rel="noopener noreffer ">Structural Similarity</a>)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ffmpeg -i &lt;degraded&gt; -i &lt;reference&gt; -filter_complex ssim -f null /dev/null
</span></span><span class="line"><span class="cl"><span class="o">[</span>Parsed_ssim_0 @ 0x7fbf0500b660<span class="o">]</span> SSIM Y:0.925477 <span class="o">(</span>11.277116<span class="o">)</span> U:0.948906 <span class="o">(</span>12.916325<span class="o">)</span> V:0.946795 <span class="o">(</span>12.740513<span class="o">)</span> All:0.932935 <span class="o">(</span>11.735054<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>译者按：SSIM 中文一般译为“结构相似性”，是衡量两幅图像相似度的指标，其详细的科普和使用可以参考这篇文章：<a href="https://www.bilibili.com/read/cv7974104/" target="_blank" rel="noopener noreffer ">使用SSIM量化评价视频编码质量</a></p>
<p>译者按：除了原作者列出的 PSNR 和 SSIM 两个指标外，还有一个 Netflix 和 南加州大学联合开发的 <a href="https://en.wikipedia.org/wiki/Video_Multimethod_Assessment_Fusion" target="_blank" rel="noopener noreffer ">VMAF</a> （Video Multimethod Assessment Fusion）是目前 Netflix 主要使用的指标，详情还是可以参考前文提到的这篇文章：<a href="https://sspai.com/post/66001" target="_blank" rel="noopener noreffer ">什么决定了你看到的画质</a></p>
<h1 id="使用-ffprobe-获取媒体信息">使用 ffprobe 获取媒体信息</h1>
<h2 id="基本概念">基本概念</h2>
<p>基础语法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffprobe &lt;input&gt;
</span></span><span class="line"><span class="cl">    <span class="o">[</span>-select_streams &lt;selection&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">[</span>-show_streams<span class="p">|</span>-show_format<span class="p">|</span>-show_frames<span class="p">|</span>-show_packets<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">[</span>-show_entries &lt;entries&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">[</span>-of &lt;output-format&gt;<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>解释：</p>
<ul>
<li>select_streams 用于指定选择视频或者音频</li>
<li>show_ 用于选择显示哪种类型的信息</li>
<li>show_entries 用于选择显示更少的信息</li>
<li>of 用于设置输出格式</li>
</ul>
<p>更多信息，参考：</p>
<ul>
<li><a href="https://ffmpeg.org/ffprobe.html" target="_blank" rel="noopener noreffer ">https://ffmpeg.org/ffprobe.html</a></li>
<li><a href="http://trac.ffmpeg.org/wiki/FFprobeTips" target="_blank" rel="noopener noreffer ">http://trac.ffmpeg.org/wiki/FFprobeTips</a></li>
</ul>
<h2 id="实际-ffpobe-案例-part-1">实际 ffpobe 案例 Part 1</h2>
<p>显示所有的流：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffprobe &lt;input&gt; -show_streams
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示视频流信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffprobe &lt;input&gt; -select_streams v -show_format
</span></span></code></pre></td></tr></table>
</div>
</div><p>Show presentation timestamp and frame type of every frame, in CSV format (p=0 disables CSV section headers):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffprobe &lt;input&gt; -select_streams v -show_frames <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-show_entries <span class="nv">frame</span><span class="o">=</span>pkt_pts_time,pict_type -of <span class="nv">csv</span><span class="o">=</span><span class="nv">p</span><span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>译者按：第三个案例不太懂，我自己试了试，效果也有点奇怪，先放着吧 😂</p>
<h2 id="实际-ffpobe-案例-part-2">实际 ffpobe 案例 Part 2</h2>
<p>更改输出为 JSON 格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffprobe &lt;input&gt; -select_streams v -show_packets -of json
</span></span></code></pre></td></tr></table>
</div>
</div><p>获取文件中流的编号（nk = 1 禁用 keys）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffprobe &lt;input&gt; -show_format -show_entries <span class="nv">format</span><span class="o">=</span>nb_streams -of <span class="nv">compact</span><span class="o">=</span><span class="nv">nk</span><span class="o">=</span>1:p<span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>以秒或 HH:MM:SS.ms 为单位获取视频长度</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffprobe &lt;input&gt; -show_format -show_entries <span class="nv">format</span><span class="o">=</span>duration -of <span class="nv">compact</span><span class="o">=</span><span class="nv">nk</span><span class="o">=</span>1:p<span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">ffprobe -sexagesimal &lt;input&gt; -show_format -show_entries <span class="nv">format</span><span class="o">=</span>duration -of <span class="nv">compact</span><span class="o">=</span><span class="nv">nk</span><span class="o">=</span>1:p<span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>以 Bit/s 为单位获取音频流</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffprobe &lt;input&gt; -select_streams a -show_entries <span class="nv">stream</span><span class="o">=</span>bit_rate -of <span class="nv">compact</span><span class="o">=</span><span class="nv">nk</span><span class="o">=</span>1:p<span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>译者按：其实这一章节的案例我个人觉得没有很大作用，平时查看媒体文件的信息基本上使用 <code>ffprobe &lt;input&gt; -hide_banner</code> 就够了。</p>
<h1 id="检查视频编解码器">检查视频编解码器</h1>
<h2 id="调试运动向量">调试运动向量</h2>
<p>在 FFmpeg 中使用 H.264 编解码器可视化运动向量的简单方法（不适用于其他编解码器）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffplay -flags2 +export_mvs input.mp4 -vf <span class="nv">codecview</span><span class="o">=</span><span class="nv">mv</span><span class="o">=</span>pf+bf+bb
</span></span><span class="line"><span class="cl">ffmpeg -flags2 +export_mvs -i input.mp4 -vf <span class="nv">codecview</span><span class="o">=</span><span class="nv">mv</span><span class="o">=</span>pf+bf+bb &lt;output&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>pf – P 帧的向前预测运动向量</li>
<li>bf – B 帧的向前预测运动向量</li>
<li>bb – B 帧的向后预测运动向量</li>
</ul>
<p></p>
<p>跟多参考：<a href="http://trac.ffmpeg.org/wiki/Debug/MacroblocksAndMotionVectors" target="_blank" rel="noopener noreffer ">http://trac.ffmpeg.org/wiki/Debug/MacroblocksAndMotionVectors</a></p>
<p>译者按：运动向量这方面的知识点我也不懂，来日再补充吧 😂</p>
<h2 id="视频流分析">视频流分析</h2>
<p>图形化方式分析视频流的其他软件：</p>
<ul>
<li><a href="https://www.elecard.com/products/video-analysis/stream-analyzer" target="_blank" rel="noopener noreffer ">Elecard Stream Analyzer</a> (商业)</li>
<li><a href="http://www.codecian.com/" target="_blank" rel="noopener noreffer ">CodecVisa</a> (商业)</li>
<li><a href="https://software.intel.com/en-us/intel-video-pro-analyzer" target="_blank" rel="noopener noreffer ">Intel Video Pro Analyzer</a> (商业)</li>
<li><a href="https://people.xiph.org/~mbebenita/analyzer/" target="_blank" rel="noopener noreffer ">AOMAnalyzer</a> (免费，针对 AV1/VP9 编码的视频)</li>
</ul>
<h1 id="总结">总结</h1>
<p>通过这节课程，你应该学到了以下知识点：</p>
<ul>
<li>理解 FFmpeg 库，编解码器，容器，编码器&hellip;</li>
<li>编码视频和音频</li>
<li>使用基础的过滤器</li>
<li>读取流信息和元数据</li>
<li>如果你遇到了困难，会寻找帮助</li>
</ul>
]]></description>
</item>
<item>
    <title>Java 集合框架一文通</title>
    <link>https://asimov.top/the-java-collections-framework/</link>
    <pubDate>Sun, 02 May 2021 22:46:28 &#43;0800</pubDate>
    <author>asimov</author>
    <guid>https://asimov.top/the-java-collections-framework/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://www.softwaretestingmaterial.com/wp-content/uploads/2018/08/Collections-Framework-In-Java.png" referrerpolicy="no-referrer">
            </div><h2 id="overview">Overview</h2>
<p>容器，就是可以容纳其它对象的对象，从 JDK 1.2 开始，Java 提供了 <strong>Java Collection Framework（JCF）</strong> 给开发者提供了一个通用的容器框架。</p>
<p>容器中只能放对象，对于基本类型（int、long、float 等）需要包装成对应的对象（Integer、Long、Float）才能放入容器。大多数时候装箱和拆箱都是自动完成的，这会造成一定程度上的性能和空间开销，但是简化了设计和编码，提高了开发效率。使用容器大概有如下优点：</p>
<ul>
<li>降低学习难度</li>
<li>降低编程难度</li>
<li>降低设计和实现相关 API 的难度</li>
<li>提高程序可复用性</li>
<li>提高 API 之间的互操作性</li>
<li>提高程序性能（容器的底层数据结构和算法通常过了大规模的功能和性能验证，大部分场景下性能会比我们自己写的好）</li>
</ul>
<p>Java 集合框架分为 Collection 和 Map 两大类，Collection 是存储单元素的容器，Map 是存储键值对（两个对象）的容器。</p>
<p>详情的 JCF 类图如下，包含并发和非并发实现，以及底层数据结构：</p>
<p></p>
<p>在 <code>J.U.C(java.util.concurrent)</code> 提供并发容器之前，所有容器都在 <code>java.util</code> 包下，其中大部分都是非线程安全的，这意味着多个线程并发读写时可能会出现数据不一致的情况。</p>
<p>即使提供了线程安全的实现，也是比较简单粗暴的使用 <code>Synchronized</code> 关键字对操作加锁，比如线程安全的 Map 容器：HashTable，和线程安全的 Collection 容器：Vector，实际上这些容器在并发读写的需求下，只能保证安全，不能保证高效，因此基本都已经不推荐使用了。</p>
<h2 id="non-concurrent-collections">Non Concurrent Collections</h2>
<p>我们先来看一下实际开发中使用得最多的 <strong>“单线程容器”</strong>，其类图结构大概如下图：</p>
<p></p>
<h3 id="collection">Collection</h3>
<p>Collection 接口是 JDK 中所有<strong>单元素容器</strong>的祖先接口，其下主要有三个接口，分别是<strong>可重复集合容器接口 List</strong>，<strong>不可重复集合容器接口 Set</strong>，和<strong>队列容器接口 Queue</strong>，分别适用于不同场景。</p>
<h4 id="list">List</h4>
<p>List 是一个<strong>元素有序、可重复、可为空</strong>的集合接口，集合中每个元素都有对应的顺序索引，默认按照元素的添加顺序设置下标，可以通过下标访问指定位置的元素，但是由于不同实现类中底层使用的数据结构不同，添加、删除和随机访问的时间复杂度各不相同。</p>
<h5 id="arraylist">ArrayList</h5>
<p>ArrayList 是<strong>基于数组实现</strong>的容器类，每个 ArrayList 都有一个容量（capacity）表示底层数组的大小，当容量不足时，ArrayList 会自动扩容，<strong>默认扩容步长是当前容量的 1.5 倍</strong>。</p>
<p>由于 ArrayList 的底层数据结构是数组，需要连续的内存空间，所以自动扩容实际上是申请一个原来大小 1.5 倍的新数组，然后将原数组中的数据拷贝到新数组中，这个操作是比较耗时的。</p>
<p>因此在使用 ArrayList 时，可以使用如下两个技巧，尽量避免或减少扩容操作，提高效率：</p>
<ul>
<li>在初始化时，尽量设置一个合理的初始大小，减少扩容频率。</li>
<li>在添加大量元素之前，可以手动调用 <code>ensureCapacity(int minCapacity)</code> 增大容量，减少递增式扩容的次数。</li>
</ul>
<p>基于数组的数据结构，<strong>ArrayList 随机访问的的效率非常高</strong>，时间复杂度是 $O(1)$，而<strong>插入和删除的效率稍低</strong>，时间复杂度是 $O(n)$</p>
<p>ArrayList 详细的源码解析参考<a href="https://pdai.tech/md/java/collection/java-collection-ArrayList.html" target="_blank" rel="noopener noreffer ">这里</a></p>
<h5 id="linkedlist">LinkedList</h5>
<p>LinkedList 是<strong>基于链表实现</strong>的容器类，同时实现了 List 接口和 Queue 接口的集合，这意味它既可以当做顺序容器（List）使用，又可以当做队列（Queue）使用，还可以当做栈（Stack）来使用。</p>
<p>实际上，当我们需要栈或者队列时，应该首选 ArrayDeque，在栈和队列的使用场景中，ArrayDeque 比 LinkedList 性能更好。所以 LinkedList 更多的时候还是用来当做顺序集合（List）来使用。</p>
<p>基于链表的数据结构，<strong>LinkedList 插入和删除的效率非常高</strong>，时间复杂度是 $O(1)$，而<strong>随机访问的效率稍低</strong>，时间复杂度是 $O(n)$，而且不存在扩容时的数据拷贝导致的效率问题。</p>
<p>LinkedList 详细的源码解析，参考<a href="https://pdai.tech/md/java/collection/java-collection-LinkedList.html" target="_blank" rel="noopener noreffer ">这里</a></p>
<h5 id="vector">Vector</h5>
<p>Vector 基本和 ArrayList 基本一样，但是内部使用 <code>synchronized</code> 对所有读写操作都做了同步，因此是线程安全的，但是应为 <code>synchronized</code> 本身实现线程安全的方式效率并不高，所以在<strong>多线程高并发场景下</strong>，使用 Vector 可能会造成性能问题，<strong>应该使用</strong> <code>JUC</code> 中提供的 <strong>CopyOnWriteArrayList</strong>。</p>
<h5 id="stack">Stack</h5>
<p>Stack 继承自 Vector，是一个使用数组实现的栈结构，由于功能和性能限制，现在已经<strong>不推荐使用</strong>了，如果需要栈结构，应该使用 Queue 接口下的 ArrayDeque 实现类，参考下文 ArrayDeque 的介绍。</p>
<h4 id="set">Set</h4>
<p>Set 接口中的方法基本和 List 一样，区别在于 Set 集合中<strong>不允许重复元素</strong>，如果添加相同的元素到 Set 集合中，第二次添加时 <code>add()</code> 方法会返回 <code>false</code>，数据会添加失败，Set 接口也<strong>不强制保证集合中元素的顺序</strong>，不同的实现类根据自身的实现方式决定是否保持顺序，并且也<strong>不限制元素是否可为空</strong>，不同的实现类可否为空的特点不同。</p>
<p>Set 接口的实现其实就是把对应的 Map 接口的实现进行一层包装，比如 HashSet 是对 HashMap 的包装，TreeSet 是对 TreeMap 的包装，LinkedHashSet 是对 LinkedHashMap 的包装。</p>
<h5 id="hashset">HashSet</h5>
<p>HashSet 实际上是对 HashMap 的一个包装，如下代码所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">......</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//HashSet里面有一个HashMap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="kd">transient</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Dummy value to associate with an Object in the backing Map
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">PRESENT</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">HashSet</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">......</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">//简单的方法转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">PRESENT</span><span class="o">)==</span><span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">......</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以其实现原理和 HashMap 一致，参考下文 HashMap 的实现与特点。</p>
<h5 id="treeset">TreeSet</h5>
<p>TreeSet 实际上也是对 TreeMap 的一个包装，如下代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">AbstractSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">NavigableSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> 
</span></span><span class="line"><span class="cl">		<span class="n">Cloneable</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">......</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">transient</span> <span class="n">NavigableMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Dummy value to associate with an Object in the backing Map
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">PRESENT</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">TreeSet</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// TreeSet里面有一个TreeMap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeMap</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">......</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">//简单的方法转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">PRESENT</span><span class="o">)==</span><span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">......</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以其实现原理和 TreeMap 一致，参考下文 TreeMap 的实现与特点。</p>
<h5 id="linkedhashset">LinkedHashSet</h5>
<p>LinkedHashSet 实际上也是对 LinkedHashMap 的包装，基本就是这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkedHashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">extends</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">implements</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;,</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">......</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// LinkedHashSet里面有一个LinkedHashMap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="nf">LinkedHashSet</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;&gt;(</span><span class="n">initialCapacity</span><span class="o">,</span> <span class="n">loadFactor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">......</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//简单的方法转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">PRESENT</span><span class="o">)==</span><span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">......</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以其实现原理和 LinkedHashMap 一致，参考下文 LinkedHashMap 的实现与特点。</p>
<h4 id="queue">Queue</h4>
<p>Queue 是 JDK 中队列也继承自 Collection 接口，除了 Collection 接口中的方法，还额外提供了两组共 6 个方法，规范队列特征的能力，一组是抛出异常的实现，一组是返回值的实现（没有则返回 null）</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center"><strong>hrows exception</strong></th>
<th style="text-align:center"><strong>Returns special value</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert</td>
<td style="text-align:center">add(e)</td>
<td style="text-align:center">offer(e)</td>
</tr>
<tr>
<td>Remove</td>
<td style="text-align:center">remove(e)</td>
<td style="text-align:center">poll(e)</td>
</tr>
<tr>
<td>Examine</td>
<td style="text-align:center">element(e)</td>
<td style="text-align:center">peek(e)</td>
</tr>
</tbody>
</table>
<h5 id="deque--arraydeque">Deque &amp; ArrayDeque</h5>
<p>Deque 是（double ended queue）的简称，顾名思义就是双端队列，是继承自 Queue 接口的子接口。</p>
<p>我们知道，在数据结构中，队列（Queue）和栈（Stack）的是很相似的，<strong>队列的出入口分别在两端，所以是先进先出（FIFO）</strong>，而<strong>栈的出入口在同一端，所以是后进先出（LIFO）</strong>。而双端队列的两端分别都可以做出入口，如果封住其中的一端，那就变成了栈，所以双端队列也可以直接当做栈来用。</p>
<p>当做队列使用时，下表列出了 Deque 与 Queue 相对应的接口：</p>
<table>
<thead>
<tr>
<th>Queue Method</th>
<th>Equivalent Deque Method</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add(e)</code></td>
<td><code>addLast(e)</code></td>
<td>向队尾插入元素，失败则抛出异常</td>
</tr>
<tr>
<td><code>offer(e)</code></td>
<td><code>offerLast(e)</code></td>
<td>向队尾插入元素，失败则返回<code>false</code></td>
</tr>
<tr>
<td><code>remove()</code></td>
<td><code>removeFirst()</code></td>
<td>获取并删除队首元素，失败则抛出异常</td>
</tr>
<tr>
<td><code>poll()</code></td>
<td><code>pollFirst()</code></td>
<td>获取并删除队首元素，失败则返回<code>null</code></td>
</tr>
<tr>
<td><code>element()</code></td>
<td><code>getFirst()</code></td>
<td>获取但不删除队首元素，失败则抛出异常</td>
</tr>
<tr>
<td><code>peek()</code></td>
<td><code>peekFirst()</code></td>
<td>获取但不删除队首元素，失败则返回<code>null</code></td>
</tr>
</tbody>
</table>
<p>当做栈使用时，下表列出了 Deque 和 与 Stack（已退休的栈结构实现）对应的接口：</p>
<table>
<thead>
<tr>
<th>Stack Method</th>
<th>Equivalent Deque Method</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>push(e)</code></td>
<td><code>addFirst(e)</code></td>
<td>向栈顶插入元素，失败则抛出异常</td>
</tr>
<tr>
<td>无</td>
<td><code>offerFirst(e)</code></td>
<td>向栈顶插入元素，失败则返回<code>false</code></td>
</tr>
<tr>
<td><code>pop()</code></td>
<td><code>removeFirst()</code></td>
<td>获取并删除栈顶元素，失败则抛出异常</td>
</tr>
<tr>
<td>无</td>
<td><code>pollFirst()</code></td>
<td>获取并删除栈顶元素，失败则返回<code>null</code></td>
</tr>
<tr>
<td><code>peek()</code></td>
<td><code>peekFirst()</code></td>
<td>获取但不删除栈顶元素，失败则抛出异常</td>
</tr>
<tr>
<td>无</td>
<td><code>peekFirst()</code></td>
<td>获取但不删除栈顶元素，失败则返回<code>null</code></td>
</tr>
</tbody>
</table>
<p>上面两个表共定义了 Deque 的 12 个接口。添加，删除，取值都有两套接口，它们功能相同，区别是对失败情况的处理不同。<strong>一套接口遇到失败就会抛出异常，另一套遇到失败会返回特殊值（<code>false</code> 或 <code>null</code>）</strong>。除非某种实现对容量有限制，大多数情况下，添加操作是不会失败的。<strong>虽然 Deque 的接口有12个之多，但无非就是对容器的两端进行操作，或添加，或删除，或查看</strong>。掌握这个规律，其实理解起来就不难了。</p>
<p>Deque 接口有两个实现类：ArrayDeque 和 ArrayList，这两个实现既可以当做队列使用，也可以当做栈使用。但是实际上，在队列和栈的场景中，ArrayDeque 的性能是要优于 ArrayList 的，所以在这些场景下，我们还是优先使用 ArrayDeque 比较好。</p>
<p><em>PS：我个人没看出来 ArrayList 实现 Deque 接口的作用，可能是历史原因吧。</em></p>
<p>从名字上就能看得出来，ArrayDeque 是通过数组实现的，更具体来讲是<strong>循环数组</strong>，也就是说该数组上任何一点都能看作起点或者终点。</p>
<p>同样，ArrayDeque 也是非线程安全的，如果需要并发安全且高效的队列，还是应该去 <code>J.U.C</code> 中去找对应的实现。另外，<strong>ArrayDeque 中不允许放入 <code>null</code>
元素</strong>。</p>
<p>ArrayDeque 详细的源码解析，参考<a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/4-Stack%20and%20Queue.md" target="_blank" rel="noopener noreffer ">这里</a></p>
<h5 id="priorityqueue">PriorityQueue</h5>
<p>PriorityQueue 是 Queue 接口中一个比较特殊的实现，顾名思义就是<strong>优先队列</strong>，其作用是能够保证<strong>每次取出的元素都是队列中权重值最小的</strong>，这里牵涉到了容器中元素中的大小关系，那么就需要比较，其大小判断可以通过元素本身的<strong>自然顺序（nature ordering）</strong>，也可以通过<strong>构造时传入的比较器（Comparator）</strong>，这个设计和 TreeMap 是一致的。</p>
<p>PriorityQueue 中不允许放入 <code>null</code> 元素，其通过<strong>堆（BinaryHeap）</strong> 实现，或者说是通过完全二叉树（Complete binary tree）实现的<strong>小顶堆</strong>（任意一个非叶子节点的权值，都不大于其左右子节点的权值）。实际上数组也可以用来作为实现 PriorityQueue 的底层数据结构。</p>
<p>PriorityQueue 的 <code>peek()</code>、<code>element()</code> 操作时间复杂度都是 $O(1)$，而 <code>add()</code>、 <code>offer()</code> 和无参数的 <code>remove()</code> 以及 <code>poll()</code> 方法的时间复杂度都是 $O(log\ n)$，总的来说，效率还是非常高的。</p>
<p>PriorityQueue 详细的源码解析，参考<a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/8-PriorityQueue.md" target="_blank" rel="noopener noreffer ">这里</a></p>
<h3 id="map">Map</h3>
<p>Map 接口可以看作是和 Collection 平级的借口，是 JDK 中所有<strong>键值对容器</strong>的祖先接口，按照是否保持容器中元素的顺序，大概可以分为两类：</p>
<ol>
<li>实现了 SortedMap 接口的“有序 Map”，以及一个特殊的 EnumMap</li>
<li>没有实现 SortedMap 接口的 “无序 Map”</li>
</ol>
<h4 id="hashmap">HashMap</h4>
<p>HashMap 是 Map 接口最重要的实现类之一，也是日常 Java 开发中最常用的键值对数据结构之一。可以放入 key 为 null 的元素，也可以放入 value 为 null 的元素。</p>
<p>HashMap 是基于 <strong>散列表（Hash Table）</strong> 数据结构的容器，但是散列表必须要解决散列冲突的问题，散列冲突目前主要有两种解决方案：开放寻址法（open addressing）和链表法（chaining），HashMap <strong>使用链表法解决散列冲突问题</strong>。</p>
<p>理论上 HashMap 的读、写、删除的效率都是 $O(1)$，非常高效，但是由于散列冲突问题的存在，HashMap 实际性能表现可能不太稳定，而且不一定能达到理论效率。</p>
<p>影响 HashMap 性能的两个最重要的参数是：初始容量（initial capacity）和负载系数（load factory）</p>
<p>初始容量指定了初始 table 的大小，复杂系数指定了 bucket 自动扩容的临界值。当 entry 的个数超过 <code>capacity * load_factory</code> 时，容器将自动扩容并重新散列。对于插入元素较多的 HashMap，将初始容量设置得大一些可以减少自动扩容（同 ArrayList 的原理）和重新散列的次数。</p>
<p>为了优化 HashMap 的实际性能，其具体实现在 JDK 8 前后有一些差别。</p>
<p>HashMap 详细的源码解析，参考<a href="https://pdai.tech/md/java/collection/java-map-HashMap&amp;HashSet.html" target="_blank" rel="noopener noreffer ">这里</a></p>
<h5 id="before-jdk-8">Before JDK 8</h5>
<p>在 JDK 8 之前，HashMap 底层用数据结构是<strong>数组+链表</strong>，用数组做 buckets，实际数据存储在每个 bucket 后的链表中，其大致结构如下：</p>
<p></p>
<p>这是非常经典的散列冲突解决方案，但是在数据量很大或者散列不够均匀的时候，容易导致数据节点链表过长，会降低散列表的读取性能，达不到理想状态下的 $O(1)$ 时间复杂度，甚至是达到 $O(n)$ 级别。</p>
<h5 id="after-jdk-8">After JDK 8</h5>
<p>在 JDK 8（含）之后，HashMap 最大的变化就在底层数据结构上引入了<strong>红黑树</strong>，为了降低数据节点的查询开销，在节点数据达到 8 个的时候，会将链表转为红黑树，这样在节点数据比较多的时候，时间复杂度可以降到 $O(log_n)$</p>
<p>其结构示意图如下：</p>
<p>
红黑树是一个性能非常稳定的近似平衡二叉查找树（binary seach tree）结构，当一个节点的数据确实比较多（可能是因为散列函数设计得不好，也可能是数据量实在太大）的时候，转成红黑树结构是一个非常靠谱的提升 HashMap 整体性能的方法。</p>
<p>虽然红黑树实现起来比链表复杂的多，但是好在 JDK 的工程师们已经帮我们最好了这部分的工作，我们只需要升级到 JDK 8，就可以不改一处代码，享受 HashMap 的性能提升。</p>
<h4 id="hashtable">HashTable</h4>
<p>HashTable 基本和 HashMap 差不多，只是内部各个方法用 <code>Synchronized</code> 实现了同步，在多线程读写的情况下，不会出现数据不一致。</p>
<p>但是 HashTable 多线程读写的性能并不好，所以，如果确实需要多线程读写安全的 Map 容器，应该使用 <code>J.U.C</code> 提供的 ConcurrentMap 接口的实现类，比如 ConcurrentHashMap，而不应该使用 HashTable，HashTable 该退休了。</p>
<h4 id="linkedhashmap">LinkedHashMap</h4>
<p>LinkedHashMap 是 HashMap 的直接子类，所以 key 和 value 同样可以为空。看这个名字大概就能猜到，这是 LinkedList 和 HashMap 的结合，<strong>可以将 LinkedHashMap 看作是用 LinkedList 强化过的 HashMap</strong>。如下是 LinkedHashMap 的结构图：</p>
<p></p>
<p>从图上能看出来，LinkedHashMap 和 HashMap 主体结构上完全一致，区别在于 <strong>LinkedHashMap 使用双向链表实现了冲突链表，并且这个双向链表将所有的 entry 都连了起来</strong>，这样做相比 HashMap 有两个额外的好处：</p>
<ol>
<li>可以保证元素的迭代顺序和插入顺序相同。</li>
<li>迭代整个 Map 的时候，不需要像 HashMap 那样迭代整个 table，而是只需要遍历 header 指向的双向链表即可，也就是 LinkedHashMap 的迭代时间和 Table 的大小无关，而是只与实际上 entry 的数量有关。</li>
</ol>
<p>由于主体结构和 HashMap 一样，所以影响 LinkedHashMap 性能的也是初始容量（initial capacity）和负载系数，原因也和 HashMap 一样。</p>
<p>LinkedHashMap 除了保证迭代顺序之外，还有一个非常有用的用法：<strong>轻松实现一个先进先出（FIFO）策略的缓存结构</strong>，注意，是缓存，不是队列。</p>
<p>LinkedHashMap 有一个 HashMap 中没有的子类方法：<code>boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest)</code>，该方法的作用是告诉 Map 是否要删除“最老”的 Entry，所谓最老就是当前 Map 中最早插入的 Entry，如果该方法返回 <code>true</code>，最老的那个元素就会被删除。而且在每次插入新元素的之后LinkedHashMap 会自动询问 <code>removeEldestEntry()</code> 是否要删除最老的元素。这样只需要在子类中重载该方法，当元素个数超过一定数量时让<code>removeEldestEntry()</code> 返回 true，就能够实现一个固定大小的FIFO策略的缓存。示例代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/** 一个固定大小的 FIFO 替换策略的缓存 */</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">FIFOCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">cacheSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">FIFOCache</span><span class="o">(</span><span class="kt">int</span> <span class="n">cacheSize</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cacheSize</span> <span class="o">=</span> <span class="n">cacheSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 当 Entry 个数超过 cacheSize 时，删除最老的 Entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">removeEldestEntry</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">eldest</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">cacheSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>LinkedHashMap 更加详细的源码解析，参考 <a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/7-LinkedHashSet%20and%20LinkedHashMap.md" target="_blank" rel="noopener noreffer ">这里</a></p>
<h4 id="treemap">TreeMap</h4>
<p>TreeMap 实现了 SortedMap 接口，意味着容器内部会按照 key 的大小对 Map 中的元素进行排序，而 key 大小的判断，既可以通过其自身的自然顺序（natural ordering），也可以通过构造时传入的比较器 Comparator。</p>
<p><strong>TreeMap 底层使用红黑树（Red-Black Tree）实现</strong>，这意味着其读取、插入和删除的时间复杂度都是 $O(log_n)$，而且得益于红黑树独特的结构，TreeMap 的性能稳定性也很好。其结构大致如下图：</p>
<p></p>
<p>出于性能原因，TreeMap 是非同步的，这意味着它不能在多线程读写情况下使用，如果需要“多线程安全的 TreeMap”，可以用 <code>Collections.synchronizedSortedMap</code> 做如下包装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SortedMap</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedSortedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">TreeMap</span><span class="o">(...));</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>同样还是由于 <code>Synchronized</code> 本身性能开销较大，不建议使用这种方式。所以，如果有这样的需求，可以直接使用 <code>J.U.C</code> 包中提供的 <code>ConcurrentSkipListMap</code> 实现。</p>
<p>如上 HashMap 中所述，红黑树本身的实现和操作比较复杂，涉及到各种左旋右旋和颜色调整，详细源码分析参考<a href="https://pdai.tech/md/java/collection/java-map-TreeMap&amp;TreeSet.html" target="_blank" rel="noopener noreffer ">这里</a></p>
<h4 id="enummap">EnumMap</h4>
<p>EnumMap 是一个有点特别的 Map 接口实现类，他是一个针对枚举（enum）类型 key 优化过的 Map，在要存储的键值对所有的 key 都是 enum 类型的时候，使用 EnumMap 会比 HashMap 更高效。</p>
<p>我们知道 HashMap 是通过散列函数计算 key 的值，然后储存到数组中，这个过程中就会产生两个可能会影响性能的点：散列函数性能和散列冲突的解决。</p>
<p>如果我们要存储的数据的 key 都是 enum 类型的话，编译器会为每个枚举类型生成的常量序列号，也就是 <code>ordinal</code>，这个值是不会冲突的，那么就只需要将这个值设置为数组的下标就可以了，这样一来就可以直接避免使用散列函数，就可以大幅提高读写性能，读、写、删除的时间复杂度都是 $O(1)$</p>
<p>所以，如果要存储到 Map 中的的数据 key 都是 enum 类型，建议使用 EnumMap 代替 HashMap，可以有效提高综合性能。</p>
<h4 id="weakhashmap">WeakHashMap</h4>
<p>如果说 EnumMap 是个有点特别的 Map，那么 WeekHashMap 就是十分特别的 Map。它的特别之处在于 WeekHashMap 中的元素（entry）可能随时被 GC 自动删除，即便我们没有手动的调用 <code>remove()</code> 或者 <code>clear()</code> 函数。</p>
<p>更直观的来说，即便我们没有显示的删除其中的元素，也有可能随时发生如下的情况：</p>
<ul>
<li>调用两次<code>size()</code>方法返回不同的值；</li>
<li>两次调用<code>isEmpty()</code>方法，第一次返回<code>false</code>，第二次返回<code>true</code>；</li>
<li>两次调用<code>containsKey()</code>方法，第一次返回<code>true</code>，第二次返回<code>false</code>，尽管两次使用的是同一个<code>key</code>；</li>
<li>两次调用<code>get()</code>方法，第一次返回一个<code>value</code>，第二次返回<code>null</code>，尽管两次使用的是同一个对象。</li>
</ul>
<p>程序员最怕的就是不可控，而这个 WeekHashMap 似乎非常疯狂，简直不知道把数据存进去之后会发生什么！</p>
<p>其实这个特点非常适合一种场景：<strong>缓存</strong>。</p>
<p>在缓存的场景下，可控缓存使用的内存是有限的，不可能缓存所有数据；缓存命中了可以提高系统效率；但是不命中也不会造成错误，所以 WeekHashMap 其实是一个天然的最少使用策略 LUF（Least Frequently Used）的缓存容器。</p>
<p>要明白 WeekHashMap 的工作原理，先要了解<strong>弱引用</strong>这个概念。</p>
<p>我们知道 Java 程序中的内存是通过 GC 自动管理的，GC 在程序运行的过程中会通过一系列非常复杂的机制自动判断哪些对象需要被回收，并释放对应的内存空间。而 GC 判断某个对象是否应该被回收的一个依据是：<strong>是否有有效的引用指向该对象</strong>，因为 Java 中是通过引用访问所有对象的，如果一个对象没有对应某个有效的引用，那么这个对象就无法被使用，那么就应该被回收。这里的<strong>有效引用</strong>不包括<strong>弱引用</strong>。</p>
<p>也就是说，弱引用确实可以用来访问对象，但是仅有弱引用指向的对象在垃圾回收时并不会被 GC 考虑在内。好比说，你把东西放在小区的垃圾桶里，你确实可以在垃圾桶里找到你放进去的东西，但是垃圾车来收垃圾的时候，并不会考虑你放在垃圾桶里的东西，他会连同垃圾一并收走。</p>
<p>WeekHashMap 内部就是通过弱引用来管理 entry 的，这意味着将一对 key-value 对象放进 WeekHashMap 之后，他就有可能随时被 GC 回收，除非该对象在 WeekHashMap 之外还有强引用。</p>
<p>关于强引用、弱引用以及其他的 Java 引用类型，可以参考 <a href="https://pdai.tech/md/java/jvm/java-jvm-gc.html#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener noreffer ">这里</a></p>
<p>除了这个特殊的管理 entry 的方式，其他方面 WeekHashMap 和 HashMap 没有什么大的区别，其具体实现可以参考前文的 HashMap。</p>
<h2 id="concurrent-collections">Concurrent Collections</h2>
<p><code>J.U.C</code> 包的出现给 Java 并发编程效率带来了巨大的提升，其中就提供了不少在并发情况下既保证数据安全，又保证效率的集合，让古老的 <code>Vector</code> 和 <code>HashTable</code> 直接退休！</p>
<p>容我先学学再来更新 :)</p>
<blockquote>
<p>本文主要参考 <a href="https://pdai.tech/md/java/collection/java-collection-all.html" target="_blank" rel="noopener noreffer ">Java 全栈知识体系 - Java集合框架</a> 和 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html" target="_blank" rel="noopener noreffer ">Oracle Java Docs - Collections Framework Overview</a></p>
</blockquote>
]]></description>
</item>
<item>
    <title>Clickhouse 亿级数据性能测试</title>
    <link>https://asimov.top/clickhouse-billion-level-data-performance-test/</link>
    <pubDate>Tue, 16 Mar 2021 21:35:39 &#43;0800</pubDate>
    <author>asimov</author>
    <guid>https://asimov.top/clickhouse-billion-level-data-performance-test/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://img.lifelog.cool/Using%20ClickHouse%20with%20MetricFire_waifu2x_art_noise3_scale.webp" referrerpolicy="no-referrer">
            </div><p>Clickhouse 在离线数据分析技术领域早已声名远扬，如果还不知道可以 <a href="https://clickhouse.tech/docs/zh/" target="_blank" rel="noopener noreffer ">点这里</a> 了解下。</p>
<p>最近由于项目需求使用到了 clickhouse 做分析数据库，于是用测试环境做了一个单表 6 亿数据量的性能测试，记录一下测试结果，有做超大数据量分析技术选型需求的朋友可以参考下。</p>
<h2 id="服务器信息">服务器信息</h2>
<ul>
<li>CPU：Intel Xeon Gold 6240 @ 8x 2.594GHz</li>
<li>内存：32G</li>
<li>系统：CentOS 7.6</li>
<li>Linux内核版本：3.10.0</li>
<li>磁盘类型：机械硬盘</li>
<li>文件系统：ext4</li>
</ul>
<h2 id="clickhouse-信息">Clickhouse 信息</h2>
<ul>
<li>部署方式：单机部署</li>
<li>版本：20.8.11.17</li>
</ul>
<h2 id="测试情况">测试情况</h2>
<blockquote>
<p>测试数据和测试方法来自 clickshouse 官方的 <a href="https://clickhouse.tech/docs/en/getting-started/example-datasets/star-schema/" target="_blank" rel="noopener noreffer ">Star Schema Benchmark</a></p>
</blockquote>
<p>按照官方指导造出了测试数据之后，先看一下数据量和空间占用情况。</p>
<h3 id="数据量和空间占用">数据量和空间占用</h3>
<table>
<thead>
<tr>
<th>表名</th>
<th>列数</th>
<th>数据行数</th>
<th>原始大小</th>
<th>压缩大小</th>
<th>压缩率</th>
</tr>
</thead>
<tbody>
<tr>
<td>supplier</td>
<td>6</td>
<td>200,000</td>
<td>11.07 MiB</td>
<td>7.53 MiB</td>
<td>68</td>
</tr>
<tr>
<td>customer</td>
<td>7</td>
<td>3,000,000</td>
<td>168.83 MiB</td>
<td>114.72 MiB</td>
<td>68</td>
</tr>
<tr>
<td>part</td>
<td>8</td>
<td>1,400,000</td>
<td>34.29 MiB</td>
<td>24.08 MiB</td>
<td>70</td>
</tr>
<tr>
<td>lineorder</td>
<td>16</td>
<td>600,037,902</td>
<td>24.03 GiB</td>
<td>16.67 GiB</td>
<td>69</td>
</tr>
<tr>
<td>lineorder_flat</td>
<td>37</td>
<td>688,552,212</td>
<td>111.38 GiB</td>
<td>61.05 GiB</td>
<td>55</td>
</tr>
</tbody>
</table>
<p>可以看到 clickhouse 的压缩率很高，压缩率都在 50 以上，基本可以达到 70 左右。<strong>数据体积的减小可以非常有效的减少磁盘空间占用、提高 I/O 性能，这对整体查询性能的提升非常有效。</strong></p>
<p>supplier、customer、part、lineorder 为一个简单的「供应商-客户-订单-地区」的星型模型，lineorder_flat 为根据这个星型模型数据关系合并的大宽表，所有分析都直接在这张大宽表中执行，减少不必要的表关联，符合我们实际工作中的分析建表逻辑。</p>
<p>以下性能测试的所有分析 SQL 都在这张大宽表中运行，未进行表关联查询。</p>
<h3 id="查询性能测试详情">查询性能测试详情</h3>
<h4 id="query-11">Query 1.1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">sum</span><span class="p">(</span><span class="n">LO_EXTENDEDPRICE</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">LO_DISCOUNT</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">revenue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">lineorder_flat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="p">(</span><span class="n">toYear</span><span class="p">(</span><span class="n">LO_ORDERDATE</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1993</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">((</span><span class="n">LO_DISCOUNT</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">LO_DISCOUNT</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">3</span><span class="p">))</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">LO_QUANTITY</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">25</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">┌────────</span><span class="n">revenue</span><span class="err">─┐</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">44652567249651</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">└────────────────┘</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">1</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="p">.</span><span class="w"> </span><span class="n">Elapsed</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">242</span><span class="w"> </span><span class="n">sec</span><span class="p">.</span><span class="w"> </span><span class="n">Processed</span><span class="w"> </span><span class="mi">91</span><span class="p">.</span><span class="mi">01</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="p">,</span><span class="w"> </span><span class="mi">728</span><span class="p">.</span><span class="mi">06</span><span class="w"> </span><span class="n">MB</span><span class="w"> </span><span class="p">(</span><span class="mi">375</span><span class="p">.</span><span class="mi">91</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="o">/</span><span class="n">s</span><span class="p">.,</span><span class="w"> </span><span class="mi">3</span><span class="p">.</span><span class="mi">01</span><span class="w"> </span><span class="n">GB</span><span class="o">/</span><span class="n">s</span><span class="p">.)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>扫描行数：91,010,000</strong> <em>大约9100万</em></p>
<p><strong>耗时(秒)：0.242</strong></p>
<p><strong>查询列数：2</strong></p>
<p><strong>结果行数：1</strong></p>
<h4 id="query-12">Query 1.2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">sum</span><span class="p">(</span><span class="n">LO_EXTENDEDPRICE</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">LO_DISCOUNT</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">revenue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">lineorder_flat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="p">(</span><span class="n">toYYYYMM</span><span class="p">(</span><span class="n">LO_ORDERDATE</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">199401</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">((</span><span class="n">LO_DISCOUNT</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">LO_DISCOUNT</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">6</span><span class="p">))</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">((</span><span class="n">LO_QUANTITY</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">26</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">LO_QUANTITY</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">35</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">┌───────</span><span class="n">revenue</span><span class="err">─┐</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">9624332170119</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">└───────────────┘</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">1</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="p">.</span><span class="w"> </span><span class="n">Elapsed</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">040</span><span class="w"> </span><span class="n">sec</span><span class="p">.</span><span class="w"> </span><span class="n">Processed</span><span class="w"> </span><span class="mi">7</span><span class="p">.</span><span class="mi">75</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="p">,</span><span class="w"> </span><span class="mi">61</span><span class="p">.</span><span class="mi">96</span><span class="w"> </span><span class="n">MB</span><span class="w"> </span><span class="p">(</span><span class="mi">191</span><span class="p">.</span><span class="mi">44</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="o">/</span><span class="n">s</span><span class="p">.,</span><span class="w"> </span><span class="mi">1</span><span class="p">.</span><span class="mi">53</span><span class="w"> </span><span class="n">GB</span><span class="o">/</span><span class="n">s</span><span class="p">.)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>扫描行数：7,750,000</strong> <em>775万</em></p>
<p><strong>耗时(秒)：0.040</strong></p>
<p><strong>查询列数：2</strong></p>
<p><strong>返回行数：1</strong></p>
<h4 id="query-21">Query 2.1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">sum</span><span class="p">(</span><span class="n">LO_REVENUE</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">toYear</span><span class="p">(</span><span class="n">LO_ORDERDATE</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_BRAND</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">lineorder_flat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="p">(</span><span class="n">P_CATEGORY</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;MFGR#12&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">S_REGION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;AMERICA&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_BRAND</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_BRAND</span><span class="w"> </span><span class="k">ASC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">┌─</span><span class="k">sum</span><span class="p">(</span><span class="n">LO_REVENUE</span><span class="p">)</span><span class="err">─┬─</span><span class="k">year</span><span class="err">─┬─</span><span class="n">P_BRAND</span><span class="err">───┐</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="mi">64420005618</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">121</span><span class="w">  </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="mi">63389346096</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">1210</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="p">...........</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">....</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">..........</span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="mi">39679892915</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1998</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">128</span><span class="w">  </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="mi">35300513083</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1998</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">129</span><span class="w">  </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">└─────────────────┴──────┴───────────┘</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">280</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="p">.</span><span class="w"> </span><span class="n">Elapsed</span><span class="p">:</span><span class="w"> </span><span class="mi">8</span><span class="p">.</span><span class="mi">558</span><span class="w"> </span><span class="n">sec</span><span class="p">.</span><span class="w"> </span><span class="n">Processed</span><span class="w"> </span><span class="mi">600</span><span class="p">.</span><span class="mi">04</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">.</span><span class="mi">20</span><span class="w"> </span><span class="n">GB</span><span class="w"> </span><span class="p">(</span><span class="mi">70</span><span class="p">.</span><span class="mi">11</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="o">/</span><span class="n">s</span><span class="p">.,</span><span class="w"> </span><span class="mi">725</span><span class="p">.</span><span class="mi">04</span><span class="w"> </span><span class="n">MB</span><span class="o">/</span><span class="n">s</span><span class="p">.)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>扫描行数：600,040,000</strong> <em>大约6亿</em></p>
<p><strong>耗时(秒)：8.558</strong></p>
<p><strong>查询列数：3</strong></p>
<p><strong>结果行数：280</strong></p>
<h4 id="query-22">Query 2.2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">sum</span><span class="p">(</span><span class="n">LO_REVENUE</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">toYear</span><span class="p">(</span><span class="n">LO_ORDERDATE</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_BRAND</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">lineorder_flat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="p">((</span><span class="n">P_BRAND</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="s1">&#39;MFGR#2221&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">P_BRAND</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="s1">&#39;MFGR#2228&#39;</span><span class="p">))</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">S_REGION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;ASIA&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_BRAND</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_BRAND</span><span class="w"> </span><span class="k">ASC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">┌─</span><span class="k">sum</span><span class="p">(</span><span class="n">LO_REVENUE</span><span class="p">)</span><span class="err">─┬─</span><span class="k">year</span><span class="err">─┬─</span><span class="n">P_BRAND</span><span class="err">───┐</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="mi">66450349438</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">2221</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="mi">65423264312</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">2222</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="p">...........</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">....</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">.........</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="mi">39907545239</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1998</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">2227</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w">     </span><span class="mi">40654201840</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1998</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">2228</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">└─────────────────┴──────┴───────────┘</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">56</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="p">.</span><span class="w"> </span><span class="n">Elapsed</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">.</span><span class="mi">242</span><span class="w"> </span><span class="n">sec</span><span class="p">.</span><span class="w"> </span><span class="n">Processed</span><span class="w"> </span><span class="mi">600</span><span class="p">.</span><span class="mi">04</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">.</span><span class="mi">60</span><span class="w"> </span><span class="n">GB</span><span class="w"> </span><span class="p">(</span><span class="mi">482</span><span class="p">.</span><span class="mi">97</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="o">/</span><span class="n">s</span><span class="p">.,</span><span class="w"> </span><span class="mi">4</span><span class="p">.</span><span class="mi">51</span><span class="w"> </span><span class="n">GB</span><span class="o">/</span><span class="n">s</span><span class="p">.)</span><span class="w"> 
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>扫描行数：600,040,000</strong> <em>大约6亿</em></p>
<p><strong>耗时(秒)：1.242</strong></p>
<p><strong>查询列数：3</strong></p>
<p><strong>结果行数：56</strong></p>
<h4 id="query-31">Query 3.1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">C_NATION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">S_NATION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">toYear</span><span class="p">(</span><span class="n">LO_ORDERDATE</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">sum</span><span class="p">(</span><span class="n">LO_REVENUE</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">revenue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">lineorder_flat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="p">(</span><span class="n">C_REGION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;ASIA&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">S_REGION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;ASIA&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="k">year</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">1992</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="k">year</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">1997</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">C_NATION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">S_NATION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">revenue</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">┌─</span><span class="n">C_NATION</span><span class="err">──┬─</span><span class="n">S_NATION</span><span class="err">──┬─</span><span class="k">year</span><span class="err">─┬──────</span><span class="n">revenue</span><span class="err">─┐</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="n">INDIA</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="n">INDIA</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">537778456208</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="n">INDONESIA</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">INDIA</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">536684093041</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="p">.....</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="p">.......</span><span class="w">   </span><span class="err">│</span><span class="w"> </span><span class="p">....</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">............</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="n">CHINA</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="n">CHINA</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="mi">1997</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">525562838002</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="n">JAPAN</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="n">VIETNAM</span><span class="w">   </span><span class="err">│</span><span class="w"> </span><span class="mi">1997</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">525495763677</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">└───────────┴───────────┴──────┴──────────────┘</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">150</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="p">.</span><span class="w"> </span><span class="n">Elapsed</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">.</span><span class="mi">533</span><span class="w"> </span><span class="n">sec</span><span class="p">.</span><span class="w"> </span><span class="n">Processed</span><span class="w"> </span><span class="mi">546</span><span class="p">.</span><span class="mi">67</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">.</span><span class="mi">48</span><span class="w"> </span><span class="n">GB</span><span class="w"> </span><span class="p">(</span><span class="mi">154</span><span class="p">.</span><span class="mi">72</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="o">/</span><span class="n">s</span><span class="p">.,</span><span class="w"> </span><span class="mi">1</span><span class="p">.</span><span class="mi">55</span><span class="w"> </span><span class="n">GB</span><span class="o">/</span><span class="n">s</span><span class="p">.)</span><span class="w"> 
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>扫描行数：546,670,000</strong> <em>大约5亿4千多万</em></p>
<p><strong>耗时(秒)：3.533</strong></p>
<p><strong>查询列数：4</strong></p>
<p><strong>结果行数：150</strong></p>
<h4 id="query-32">Query 3.2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">C_CITY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">S_CITY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">toYear</span><span class="p">(</span><span class="n">LO_ORDERDATE</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">sum</span><span class="p">(</span><span class="n">LO_REVENUE</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">revenue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">lineorder_flat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="p">(</span><span class="n">C_NATION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;UNITED STATES&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">S_NATION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;UNITED STATES&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="k">year</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">1992</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="k">year</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">1997</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">C_CITY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">S_CITY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">revenue</span><span class="w"> </span><span class="k">DESC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">┌─</span><span class="n">C_CITY</span><span class="err">─────┬─</span><span class="n">S_CITY</span><span class="err">─────┬─</span><span class="k">year</span><span class="err">─┬────</span><span class="n">revenue</span><span class="err">─┐</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">ST6</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">ST6</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">5694246807</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">ST0</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">ST0</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">5676049026</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="p">..........</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">..........</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">....</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">..........</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">ST9</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">ST9</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1997</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">4836163349</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">ST9</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">ST5</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">1997</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="mi">4769919410</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">└────────────┴────────────┴──────┴────────────┘</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">600</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="p">.</span><span class="w"> </span><span class="n">Elapsed</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">.</span><span class="mi">000</span><span class="w"> </span><span class="n">sec</span><span class="p">.</span><span class="w"> </span><span class="n">Processed</span><span class="w"> </span><span class="mi">546</span><span class="p">.</span><span class="mi">67</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">.</span><span class="mi">56</span><span class="w"> </span><span class="n">GB</span><span class="w"> </span><span class="p">(</span><span class="mi">546</span><span class="p">.</span><span class="mi">59</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="o">/</span><span class="n">s</span><span class="p">.,</span><span class="w"> </span><span class="mi">5</span><span class="p">.</span><span class="mi">56</span><span class="w"> </span><span class="n">GB</span><span class="o">/</span><span class="n">s</span><span class="p">.)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>扫描行数：546,670,000</strong> <em>大约5亿4千多万</em></p>
<p><strong>耗时(秒)：1.00</strong></p>
<p><strong>查询列数：4</strong></p>
<p><strong>结果行数：600</strong></p>
<h4 id="query-41">Query 4.1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">toYear</span><span class="p">(</span><span class="n">LO_ORDERDATE</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">C_NATION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">sum</span><span class="p">(</span><span class="n">LO_REVENUE</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">LO_SUPPLYCOST</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">profit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">lineorder_flat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="p">(</span><span class="n">C_REGION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;AMERICA&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">S_REGION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;AMERICA&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">((</span><span class="n">P_MFGR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;MFGR#1&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="p">(</span><span class="n">P_MFGR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;MFGR#2&#39;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">C_NATION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">C_NATION</span><span class="w"> </span><span class="k">ASC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">┌─</span><span class="k">year</span><span class="err">─┬─</span><span class="n">C_NATION</span><span class="err">──────┬────────</span><span class="n">profit</span><span class="err">─┐</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">ARGENTINA</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="mi">1041983042066</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">1992</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">BRAZIL</span><span class="w">        </span><span class="err">│</span><span class="w"> </span><span class="mi">1031193572794</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="p">....</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">......</span><span class="w">        </span><span class="err">│</span><span class="w">  </span><span class="p">............</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">1998</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">PERU</span><span class="w">          </span><span class="err">│</span><span class="w">  </span><span class="mi">603980044827</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">1998</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">STATES</span><span class="w"> </span><span class="err">│</span><span class="w">  </span><span class="mi">605069471323</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">└──────┴───────────────┴───────────────┘</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">35</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="p">.</span><span class="w"> </span><span class="n">Elapsed</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">.</span><span class="mi">066</span><span class="w"> </span><span class="n">sec</span><span class="p">.</span><span class="w"> </span><span class="n">Processed</span><span class="w"> </span><span class="mi">600</span><span class="p">.</span><span class="mi">04</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">.</span><span class="mi">41</span><span class="w"> </span><span class="n">GB</span><span class="w"> </span><span class="p">(</span><span class="mi">118</span><span class="p">.</span><span class="mi">43</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="o">/</span><span class="n">s</span><span class="p">.,</span><span class="w"> </span><span class="mi">1</span><span class="p">.</span><span class="mi">66</span><span class="w"> </span><span class="n">GB</span><span class="o">/</span><span class="n">s</span><span class="p">.)</span><span class="w">  
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>扫描行数：600,040,000</strong> <em>大约6亿</em></p>
<p><strong>耗时(秒)：5.066</strong></p>
<p><strong>查询列数：4</strong></p>
<p><strong>结果行数：35</strong></p>
<h4 id="query-42">Query 4.2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">toYear</span><span class="p">(</span><span class="n">LO_ORDERDATE</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">S_NATION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_CATEGORY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">sum</span><span class="p">(</span><span class="n">LO_REVENUE</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">LO_SUPPLYCOST</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">profit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">lineorder_flat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="p">(</span><span class="n">C_REGION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;AMERICA&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">(</span><span class="n">S_REGION</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;AMERICA&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">((</span><span class="k">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1997</span><span class="p">)</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="p">(</span><span class="k">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1998</span><span class="p">))</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="p">((</span><span class="n">P_MFGR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;MFGR#1&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="p">(</span><span class="n">P_MFGR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;MFGR#2&#39;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">S_NATION</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_CATEGORY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">year</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">S_NATION</span><span class="w"> </span><span class="k">ASC</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">P_CATEGORY</span><span class="w"> </span><span class="k">ASC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">┌─</span><span class="k">year</span><span class="err">─┬─</span><span class="n">S_NATION</span><span class="err">──────┬─</span><span class="n">P_CATEGORY</span><span class="err">─┬───────</span><span class="n">profit</span><span class="err">─┐</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">1997</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">ARGENTINA</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">11</span><span class="w">    </span><span class="err">│</span><span class="w"> </span><span class="mi">102369950215</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">1997</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">ARGENTINA</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">12</span><span class="w">    </span><span class="err">│</span><span class="w"> </span><span class="mi">103052774082</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="p">....</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="p">.........</span><span class="w">     </span><span class="err">│</span><span class="w"> </span><span class="p">.......</span><span class="w">    </span><span class="err">│</span><span class="w"> </span><span class="p">............</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">1998</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">STATES</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">24</span><span class="w">    </span><span class="err">│</span><span class="w">  </span><span class="mi">60779388345</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">│</span><span class="w"> </span><span class="mi">1998</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">UNITED</span><span class="w"> </span><span class="n">STATES</span><span class="w"> </span><span class="err">│</span><span class="w"> </span><span class="n">MFGR</span><span class="o">#</span><span class="mi">25</span><span class="w">    </span><span class="err">│</span><span class="w">  </span><span class="mi">60042710566</span><span class="w"> </span><span class="err">│</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">└──────┴───────────────┴────────────┴──────────────┘</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="mi">100</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="p">.</span><span class="w"> </span><span class="n">Elapsed</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">826</span><span class="w"> </span><span class="n">sec</span><span class="p">.</span><span class="w"> </span><span class="n">Processed</span><span class="w"> </span><span class="mi">144</span><span class="p">.</span><span class="mi">42</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">17</span><span class="w"> </span><span class="n">GB</span><span class="w"> </span><span class="p">(</span><span class="mi">174</span><span class="p">.</span><span class="mi">78</span><span class="w"> </span><span class="n">million</span><span class="w"> </span><span class="k">rows</span><span class="o">/</span><span class="n">s</span><span class="p">.,</span><span class="w"> </span><span class="mi">2</span><span class="p">.</span><span class="mi">63</span><span class="w"> </span><span class="n">GB</span><span class="o">/</span><span class="n">s</span><span class="p">.)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>扫描行数：144,420,000</strong> <em>大约1亿4千多万</em></p>
<p><strong>耗时(秒)：0.826</strong></p>
<p><strong>查询列数：4</strong></p>
<p><strong>结果行数：100</strong></p>
<h2 id="性能测试结果汇总">性能测试结果汇总</h2>
<table>
<thead>
<tr>
<th style="text-align:left">查询语句</th>
<th style="text-align:left">SQL简要说明</th>
<th style="text-align:right">扫描行数</th>
<th style="text-align:right">返回行数</th>
<th style="text-align:right">查询列数</th>
<th style="text-align:right">耗时(秒)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Q1.1</td>
<td style="text-align:left">乘积、汇总、4个条件、首次运行</td>
<td style="text-align:right">91,010,000</td>
<td style="text-align:right">1</td>
<td style="text-align:right">2</td>
<td style="text-align:right">0.242</td>
</tr>
<tr>
<td style="text-align:left">Q1.2</td>
<td style="text-align:left">Q1.1增加1个条件运行</td>
<td style="text-align:right">7,750,000</td>
<td style="text-align:right">1</td>
<td style="text-align:right">2</td>
<td style="text-align:right">0.040</td>
</tr>
<tr>
<td style="text-align:left">Q2.1</td>
<td style="text-align:left">汇总、函数、2列分组、2列排序、首次运行</td>
<td style="text-align:right">600,040,000</td>
<td style="text-align:right">280</td>
<td style="text-align:right">3</td>
<td style="text-align:right">8.558</td>
</tr>
<tr>
<td style="text-align:left">Q2.2</td>
<td style="text-align:left">Q2.1增加1个条件运行</td>
<td style="text-align:right">600,040,000</td>
<td style="text-align:right">56</td>
<td style="text-align:right">3</td>
<td style="text-align:right">1.242</td>
</tr>
<tr>
<td style="text-align:left">Q3.1</td>
<td style="text-align:left">汇总、函数、3列分组、2列排序、首次运行</td>
<td style="text-align:right">546,670,000</td>
<td style="text-align:right">150</td>
<td style="text-align:right">4</td>
<td style="text-align:right">3.533</td>
</tr>
<tr>
<td style="text-align:left">Q3.2</td>
<td style="text-align:left">Q3.1更换条件运行</td>
<td style="text-align:right">546,670,000</td>
<td style="text-align:right">600</td>
<td style="text-align:right">4</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:left">Q4.1</td>
<td style="text-align:left">相减、汇总、函数、2列分组、2列排序、首次运行</td>
<td style="text-align:right">600,040,000</td>
<td style="text-align:right">35</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5.006</td>
</tr>
<tr>
<td style="text-align:left">Q4.2</td>
<td style="text-align:left">Q4.1增加2个条件运行</td>
<td style="text-align:right">144,420,000</td>
<td style="text-align:right">100</td>
<td style="text-align:right">4</td>
<td style="text-align:right">0.826</td>
</tr>
</tbody>
</table>
<p>在当前软硬件环境下，扫描 6 亿多行数据，常见的分析语句首次运行最慢在 8 秒左右能返回结果，相同的分析逻辑更换条件再次查询的时候效率有明显的提升，可以缩短到 1 秒左右，如果只是简单的列查询没有加减乘除、聚合等逻辑，扫描全表 6 亿多行数据首次查询基本可以在 2 秒内执行完成。</p>
<p>以上是单机部署 Clickhouse 的性能表现情况，在不提升单机硬件性能的条件下，如果使用合理的集群部署，性能还能进一步提高。</p>
<p>这个表现，毋庸置疑是目前离线数据分析数据库领域的性能王者。</p>
]]></description>
</item>
<item>
    <title>数据结构之数组</title>
    <link>https://asimov.top/data-structures-array/</link>
    <pubDate>Tue, 02 Mar 2021 20:16:39 &#43;0800</pubDate>
    <author>asimov</author>
    <guid>https://asimov.top/data-structures-array/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://cdn.educba.com/academy/wp-content/uploads/2019/11/Arrays-in-data-structure.png" referrerpolicy="no-referrer">
            </div><h2 id="简介">简介</h2>
<p>数组是一个<strong>线性表</strong>类型的数据数据，它用一组<strong>连续的内存空间</strong>，来存储一组<strong>类型相同的数据</strong>。</p>
<p>数组中使用<strong>下标</strong>来表示某个元素在数组中的位置，下标从 0 开始计数。例如数组 array 中第 6 个元素，表示为：<code>array[5]</code></p>
<p></p>
<h2 id="读取">读取</h2>
<h3 id="随机访问">随机访问</h3>
<p>基于<strong>连续内存空间</strong>和<strong>类型相同</strong>两个特征，使得<strong>随机访问</strong>数组中的数据成为可能。</p>
<p>假设数组 <code>array</code> 的起始内存地址为 <code>start</code>，因为储存的数据类型相同，因此每块数据占用的内存大小也相同，假设为 <code>size</code>，那么读取下标为 <code>i</code> 的数据的内存地址的公式为：<code>array[i] = start + i * size</code></p>
<p>计算机可以通过这样的公式直接读取这个内存地址中储存的数据，不需要任何额外的操作，一发命中，所以其<strong>时间复杂度为</strong> $\mathbf{O(1)}$</p>
<h3 id="访问越界">访问越界</h3>
<p>由于访问数组需要指定下标，那么当指定的下标不存在时，会发生读取错误，称为访问越界。这个错误在不同的语言中，有不同的表现。</p>
<p>如果是 Java 这种语言层做了越界检查的语言，就会抛出 <code>java.lang.ArrayIndexOutOfBoundsException</code>，但是如果是 C 语言的话，可能会发生不可预知的错误，比如无限循环。所以访问数组时，需要警惕访问越界错误。</p>
<h3 id="查找">查找</h3>
<p>有些地方说数组适合查找，查找的时间复杂度是 $O(1)$，这其实是不对的。</p>
<p>随机读取的前提是知道元素的下标，<strong>随机读取并不是查找</strong>，查找是要在数组中找到某个目标元素，在找到之前是不知道下标的，所以<strong>查找的时间复杂度不是</strong> $\mathbf{O(1)}$。</p>
<p>查找有不同的实现算法，即便是排好序的数组，用二分法查找，时间复杂度也是 $O(log_n)$</p>
<h2 id="插入">插入</h2>
<p>如果我们要在一个长度为 10，且前 5 个位置都已经有数据的数组中，插入一个新的元素到第 3 个位置，时间复杂度是多少？</p>
<p>例如现有数组 <code>[bily,tony,jack,oliver,james]</code>，我们要将新同学 <code>harry</code> 插入到 <code>jack</code> 现在的位置上，这里需要分两种情况来看</p>
<h3 id="有序插入">有序插入</h3>
<p>如果插入之后需要保持元素的顺序，插入后的数组应该是这样 <code>[bily,tony,harry,jack,oliver,james]</code>，那么第 3 位及以后的所有元素都需要往后挪一位。</p>
<p>这种情况下，最好时间复杂度是 $O(1)$，就是插入的元素刚好在最后一位的情况，不需要移动任何元素；</p>
<p>最坏时间复杂度是 $O(n)$，就是插入的元素在第一位的情况，所有元素都需要移动一次；</p>
<p>那么平均时间复杂度是多少呢？因为插入到每个位置的概率都是一样的，所以<strong>平均时间复杂度是</strong> $\frac{1+2+\cdots+n}{n}=\mathbf{O(n)}$</p>
<h3 id="无顺插入">无顺插入</h3>
<p>如果插入之后不需要保持元素的顺序，那么插入时直接交换 <code>jack</code> 和 <code>harry</code> 的位置即可：<code>[bily,tony,harry,oliver,james,jack]</code></p>
<p>此时无论将新元素插入到哪个位置上，都只需要操作新旧两个元素，因此<strong>时间复杂度是</strong> $\mathbf{O(1)}$</p>
<h3 id="扩容">扩容</h3>
<p>因为数组使用的是一块连续的内存，所以在使用之前就需要提前向计算机申请内存，也就是在声明数组时，需要确定数组的大小。</p>
<p>当数组中的空间耗尽时，就无法插入新元素，此时需要手动给数组进行“扩容”，也就是新申请一个更大的数组，然后将原来的数据搬过去，再插入新数据。这是一个比较耗时的操作，<strong>时间复杂度是</strong> $\mathbf{O(n)}$</p>
<h2 id="删除">删除</h2>
<h3 id="立即删除">立即删除</h3>
<p>还是因为数组使用连续内存空间的特征，所以在删除了其中一个元素后，这个位置不能空着，否则内存空间就不连续了，那么就需要把后面的数据都往前挪一位。</p>
<p>这个操作和保持顺序插入是比较类似的，如果删除的刚好是最后一个元素，那时间复杂度就是 $O(n)$，如果删除的是第一个元素，那时间复杂度就是 $O(n)$，而平<strong>均时间复杂度是</strong> $\mathbf{O(n)}$</p>
<h3 id="延后删除">延后删除</h3>
<p>除了踏踏实实的立即删除外，为了优化数组删除操作的性能，工程师们有一些巧思妙想。</p>
<p>例如，我们要在数组 <code>[bily,tony,harry,jack,oliver,james]</code> 中依次删除 <code>bily</code> 和<code>tony</code>，如果操作一次就删除一次，那么就会造成两次数据搬运，造成性能损耗。</p>
<p>实际上，在大部分情况下，删除就是为了让被删除的数据无法被读取，那么我们只需要将这两个数据标记为已删除，而不是真正的删除，让其无法被读取，然后等到数据空间不够的时候，再一次性删除所有被标记为已删除的数据，只需要进行一次数据搬运操作。</p>
<p>在操作频繁的情况下中，这样可以大大提高数组操作的性能表现。</p>
<p>这个先标记再延迟删除的思路，其实就是 Java 虚拟机中标记清除垃圾回收算法的核心思想。数据结构和算法的魅力就在于此，<strong>很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是可拓展可迁移，才是最有价值的。</strong></p>
<h2 id="总结">总结</h2>
<ul>
<li>数组是一种适合多读少写的数据结构，随机访问效率很高，时间复杂度是 $O(1)$，但是插入和删除操作相对低效，时间复杂度是 $O(n)$</li>
<li>数据本身是一种很基础的数据结构，提供的 API 比较有限，复杂操作并不方便。很多编程语言都提供了以数组为基础的容器，提供了更多的 API，使用起来更加方便，如果不是对性能有非常高的要求，日常开发中使用容器更方便。</li>
<li>基于数组本身的特点，在使用数据容器（例如 Java 中的 ArrayList）时，尽量提前设置大小，可以提高效率。</li>
</ul>
]]></description>
</item>
<item>
    <title>算法复杂度分析入门</title>
    <link>https://asimov.top/introduction-to-algorithm-complexity-analysis/</link>
    <pubDate>Sat, 06 Feb 2021 17:04:54 &#43;0800</pubDate>
    <author>asimov</author>
    <guid>https://asimov.top/introduction-to-algorithm-complexity-analysis/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://img.lifelog.cool/algorithm-analysis-gate-cse-notes_waifu2x_art_noise3_scale.jpg" referrerpolicy="no-referrer">
            </div><p><strong>执行效率</strong>和<strong>资源消耗</strong>是评价一个算法优劣最核心的两个点，分别代表运行这个算法所需要消耗的<strong>时间</strong>和<strong>空间</strong>。</p>
<p>分析运行一个算法需要消耗多少时间的行为叫做<strong>时间复杂度分析</strong>，同理，分析运行一个算法需要消耗多少空间的行为叫做<strong>空间复杂度分析</strong>。</p>
<p>实际上，如果我们直接将算法运行一遍，记录下运行过程中消耗的时间和空间，就可以得到这个算法准确的资源消耗情况。这种思路确实是可以，我们可以管这种方法叫做<strong>事后统计法</strong>。</p>
<p>但是这样得出来的结果变量太多，比如测试环境的硬件性能，软件（操作系统 / SDK 等）版本，测试的数据规模，甚至是实现算法所用的编程语言，都对结果都有或多或少的影响。而如果想要测试条件覆盖尽可能多的情况，就会产生极其巨大的工作量，即便是一个很简单的算法，都需要非常大量的测试。这显然不是一个可取的方法。</p>
<p>因此，事后统计法一般只适合在特定环境下给特定的程序做性能测试（例如很多程序在上线之前都要做压力测试），不适合用来对一个通用型的算法或程序做无差别的性能评估。</p>
<h2 id="大-o-表示法">大 O 表示法</h2>
<p>为了在程序运行前，不依赖具体测试结果，就能无差别的评估一个算法的执行效率，工程师们使用了一个数学中的概念：<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7" target="_blank" rel="noopener noreffer "><strong>大 O 符号，又称渐进符号</strong></a></p>
<p><strong>大 O 表示法</strong>是目前做算法复杂度分析时所使用的行业标准，这是一个抽象的概念，它<strong>表示的不是某个具体的值，而是一种趋势</strong>。</p>
<p>比如下面是一个计算 1 + 2 + 3 + &hellip; + n 的累加式的函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">foo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>假定计算机每执行一行代码所消耗的时间为 $t$，那么在这个例子中，第二行是一个简单的赋值操作，消耗时间为 $t$，第四、五行是一个循环操作，消耗时间为 $2n*t$，那么程序总消耗时间为 $T(n)= t + 2nt$</p>
<p>再看下面这个例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">bar</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这个例子中，第二行耗费的时间为 $t$，三、四、五行是一个双层循环，其中第四、五行耗费的时间是 $2n^2<em>t$，第三行耗费的时间是 $n</em>t$，那么总的时间消耗为 $T(n)=t+nt+2n^2t$</p>
<p>通过两个例子，可以发现一个明显的规律：<strong>代码的总执行时间 $T(n)$ 与每行代码的执行次数 $n$ 成正比。</strong></p>
<p>利用大 O 符号，我们可以把这个规律表示为：$$T(n) = O(f(n))$$
这个表达式称之为 <strong>大 O 表达式</strong>，其中：$T(n)$ 表示程序总的执行时间，$f(n)$ 表示每行代码执行的总次数，$n$ 表示数据规模的大小，$O$ 表示 $T(n)$ 与 $f(n)$ 成正比。</p>
<p>所以，大 O 表达式实际上并不是代表程序具体执行的时间，而是<strong>表示代码执行时间随数据规模增长的变化趋势</strong>，因此，也叫做<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p>
<p>在大 O 表达式中，当 $n$ 趋近于无限大时，公式中的<strong>常量、系数、低阶部分对增长趋势的影响非常小，可以忽略不计</strong>，因为现代计算机的执行速度非常快，通常能达到每秒几百亿次，因此我们只需要记录一个最大量级即可。</p>
<p>因此，第一个例子中我们得出的 $T(n)=t+2nt$，忽略常量 $t$ 和系数 $2t$ 之后，用大 O 表示法为：$T(n)=O(n)$</p>
<p>第二个例子中的 $T(n)=t+nt+2n^2t$ 忽略常量和系数，保留最大量级后，用大 O 表示法为：$T(n)=O(n^2)$  <em>（这个例子在后文“加法法则”中会有更详细的解释）</em></p>
<p>这种分析思路来源于数学中的 <a href="https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90" target="_blank" rel="noopener noreffer ">渐进分析</a> 方法，计算机科学实际上就是从数学中独立出来的一个分支，在解决比较底层和抽象层面的问题上，用的基本都是数学方法。</p>
<h2 id="时间复杂度分析">时间复杂度分析</h2>
<blockquote>
<p>时间，是世间最宝贵的资源。</p>
</blockquote>
<p>在算法的复杂度分析中，时间复杂度分析通常比空间复杂度分析更重要，也更复杂。因为计算机的空间（硬件）是可以扩容的，而人类目前的科技能力，还远远达不到“扩容时间”的水平。</p>
<p>因此，我们先重点关注时间复杂度分析。</p>
<h3 id="分析技巧">分析技巧</h3>
<p>分析代码的时间复杂度一般都需要按照具体逻辑具体分析，不过也有一些可以帮助我们简化分析的技巧，下面分享两个最常用的分析技巧。</p>
<h4 id="乘法法则">乘法法则</h4>
<p>如下示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">foo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">bar</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">bar</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这其实是一个拆成两个函数的嵌套循环，如果函数 <code>foo()</code> 的循环体中是一个简单的操作，那么两个函数的时间复杂度都是 $O(n)$，但是函数 <code>foo()</code> 的循环体中调用了函数 <code>bar()</code>，而函数<code>bar()</code>的时间复杂度是$O(n)$，因此函数 <code>foo()</code> 的时间复杂度就是 $O(n)*O(n) = O(n^2)$</p>
<p>如上所示，<strong>复杂度分析的乘法法则抽象为数学公式就是：</strong>
<data id="id-1" data-raw></data></p>
<p>当碰到嵌套循环代码时，可以使用乘法法则帮助我们分析复杂度：<strong>嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。</strong></p>
<p>例如外层循环时间复杂度为 $O(f(n))$，内层循环时间复杂度为 $O(g(n))$，那么总的时间复杂度就是 $O(f(n)*g(n))$</p>
<h4 id="加法法则">加法法则</h4>
<p>如下示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">cal</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">foo</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">bar</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">foo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">bar</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">foo</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>根据上面的计算规则，我们知道函数 <code>foo()</code> 的时间复杂度 $T_1(n) = O(n)$，函数 <code>bar()</code> 的时间复杂度 $T_2(n) = O(n^2)$，而函数 <code>cal()</code> 中的第一段是个 100 次的循环，虽然是个循环，但是个已知次数的常量循环，与数据规模 $n$ 无关。</p>
<p>同时，随着数据规模的增大，$O(n^2)$ 的时间复杂度会远高于 $O(n)$，此时只需要取复杂度最高的值即可，因此总复杂度</p>
<data id="id-2" data-raw></data>
<p>如上所示，<strong>复杂度分析的加法法则抽象为数据公式就是：</strong></p>
<data id="id-3" data-raw></data>
<p>当碰到程序中包含多个子函数/算法时，可以使用加法法则帮助我们分析复杂度：<strong>总复杂度等于量级最大的那段代码的复杂度。</strong></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>技巧<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">如果在多段代码中，无法确定哪一段复杂度最大，那么直接相加即可。</div>
        </div>
    </div>
<p>如 $T_1=O(n)$，$T_2=O(m)$，在无法确定 $m$ 和 $n$ 谁更大时，则 $T(n)=O(n+m)$</p>
<p>大部分情况下，复杂的算法或者程序都是由简单的算法步骤组合而成，这两个技巧有助于我们在分析复杂算法的时候理清思路，不被绕晕。理解这两个法则之后会发现，都是很自然的规律，所以不用刻意去记忆和套用，多分析几个实例，自然就熟悉了，而且可以总结出更适合自己思维习惯的技巧。</p>
<h3 id="分析实例">分析实例</h3>
<p>虽然代码千变万化，但是得益于数学思想的高度抽象性，以下几种形式就能囊括绝大部分算法的复杂度（按时间复杂度量级升序排列）：</p>
<ol>
<li>常数阶：$O(1)$</li>
<li>对数阶：$O(log\ n)$</li>
<li>线性阶：$O(n)$</li>
<li>线性对数阶：$O(n*log\ n)$</li>
<li>k次方阶：$O(n^k)$</li>
<li>指数阶：$O(k^n)$</li>
<li>阶乘阶：$O(n!)$</li>
</ol>
<p>以上 7 种量级的复杂度，可以分为两类：<strong>多项式量级</strong>和<strong>非多项式量级</strong>，其中<strong>非多项式量级只有两个：$O(k^n)$ 和 $O(n!)$</strong>。</p>
<p>时间复杂度为非多项式量级的算法问题也叫做 <a href="https://zh.wikipedia.org/wiki/NP_%28%E8%A4%87%E9%9B%9C%E5%BA%A6%29" target="_blank" rel="noopener noreffer ">NP（Non-Deterministic Polynomial 非确定多项式）问题</a></p>
<p>随着数据规模的增大，非多项式时间复杂度量级的算法，执行时间会急剧增加，所以，<strong>非多项式时间复杂度的算法一般效率都很低</strong>，除非是确定性的小规模数据应用场景，大多是情况下都<strong>不应该使用</strong>，否则容易造成程序性能急剧下降。</p>
<p>我们主要看下几种常见的<strong>多项式时间复杂度</strong>的例子：</p>
<h4 id="常数阶">常数阶</h4>
<p>首先还是要重申一下大 O 表达式的概念：表示程序执行时间随数据规模增长的变化趋势。</p>
<p>所以 $O(1)$ 并不是说只执行一行代码，而是指执行时间不会随着数据规模的增大而无增大，比如下面这个例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sum</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>即便需要执行 3 行代码，它的时间复杂度也是 $O(1)$，而不是 $O(3)$</p>
<p>通常情况下，如果一段代码里没有循环、递归，其时间复杂度都是 $O(1)$，其函数图形如下</p>
<p></p>
<h4 id="线性阶">线性阶</h4>
<p>线性阶也是一种非常常见的时间复杂度量级，比如文章一开始我们就分析过的第一个例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">foo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这就是一个典型的 $O(n)$ 复杂度的例子，程序执行时间的增长幅度和数据规模的增长幅度保持一致。</p>
<p>通常情况下，一个简单的单层循环的时间复杂度就是 $O(n)$ ，其函数图形如下：</p>
<p></p>
<h4 id="对数阶">对数阶</h4>
<p>对数阶是也是很常见，但是分析起来复杂一些的时间复杂度类型。看下面这个例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">foo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这段代码的逻辑是： i 在循环中不断乘 2 ，直到 i &gt;= n 时，退出循环
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>根据上文的分析，我们只要分析出这个循环执行了多少次，就能算出这段代码的时间复杂度。</p>
<p>实际上就是等比数列：<data id="id-4" data-raw></data>，也就是 $2^x = n$ 求解 $x$，高中数学给了我们答案：$x = log_2n$ ，所以这个循环执行了 $log_2n$ 遍，因此这段代码的时间复杂度为 $O(log_2n)$</p>
<p>如果我们把上述例子中的常量乘数 <code>2</code> 换成 <code>3</code>，那么时间复杂度就变成了 $O(log_3n)$</p>
<p>根据对数的<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E6%95%B0#%E8%BF%90%E7%AE%97%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener noreffer ">链式运算</a>，我们知道 $log_3n = log_32 * log_2n$，那么 $O(log_3n) = O(log_32 * log_2n)$，其中 $log_32$ 是一个常量系数，基于上文我们的分析，<strong>在大 O 表示法中，可以忽略系数，即：</strong></p>
<p>$O(C*f(n)) = O(f(n))$</p>
<p>也就是说，在 $O(log_kn)$ 这样的对数阶复杂度中，无论底数常量 $k$ 是多少，复杂度都是一样的，所以我们统一忽略底数，将对数阶复杂度表示为：$O(log\ n)$，其函数图像图下：</p>
<p></p>
<h4 id="线性对数阶">线性对数阶</h4>
<p>理解了对数阶 $O(log\ n)$ 之后，理解线性对数阶就容易很多了。将一个 $O(log\ n)$ 复杂度的步骤，执行 $n$ 遍，其复杂度就是 $O(nlog\ n)$</p>
<p>如下是一个简单的 $O(nlog_n)$ 时间复杂度程序的示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">foo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这段代码中，外面套的这层 for 循环并没有什么实际意义，仅作为演示说明
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>根据前文我们提到的乘法法则，这段代码的时间复杂度很容易计算得出：</p>
<p>$T(n) = O(n) * O(log_n) = O(nlog_n)$</p>
<p>这就是线性对数阶，其函数图像如下：</p>
<p></p>
<h4 id="k-次方阶">K 次方阶</h4>
<p>这也是最常见的时间复杂度之一，$K$ 是常数，如下是一个非常简单的平方阶时间复杂度示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">foo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>利用上文介绍的乘法法则，很快就能计算出这段代码的时间复杂度：</p>
<p>$T(n)=O(n)*O(n)=O(n^2)$</p>
<p>其函数图像图下：</p>
<p></p>
<p>⚠️ 注意：<strong>次方阶 $O(n^k)$ 容易和指数阶 $O(k^n)$ 混淆</strong>，它们都是指数函数，<strong>区别在于数据规模 $n$ 是底数还是指数</strong>，如果数据规模 $n$ 是指数的话，复杂度会急剧上升，参考前文的 <a href="https://zh.wikipedia.org/wiki/NP_%28%E8%A4%87%E9%9B%9C%E5%BA%A6%29" target="_blank" rel="noopener noreffer ">NP 问题</a></p>
<h3 id="分析进阶">分析进阶</h3>
<p>以上都是一些逻辑相对简单的例子，我们在实际编写程序的时候，通常会有一些提升效率的操作和技巧，这会让我们在分析时间复杂的过程中要考虑的因素更多一些。</p>
<p>如下示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// array 是一个数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span><span class="n">1</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这个函数的逻辑是找出数组 array 中目标数值 x 的下标位置，如果数组中没有目标值 x ，就返回 -1
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这段程序是在遍历数组，但又不完全是在遍历数组。因为循环中间的这个 <code>return</code> 导致我们不得不思考一个问题：如果 <code>x</code> 就在数组的第一位，那么这个函数就并不会遍历整个数组，而是在第一次循环就退出，这个时候时间复杂度就是 $O(1)$，但是如果 <code>x</code> 在数组中的最后一位，或是数组中根本不存在 <code>x</code>，那么就需要遍历整个数组，这个时候时间复杂度就变成了 $O(n)$ （$n$ 是数组的长度）</p>
<p>所以这段代码在不同情况下，时间复杂度是不一样的。</p>
<p>为了表示不同情况下的时间复杂度，我们需要再引入三个概念：<strong>最好时间复杂度</strong>，<strong>最坏时间复杂度</strong>和<strong>平均时间复杂度</strong>。</p>
<h4 id="最好最坏时间复杂度">最好/最坏时间复杂度</h4>
<p><strong>最好和最坏时间复杂度</strong>比较简单，顾名思义，它们<strong>分别表示在最理想和最不理想的情况下代码的时间复杂度</strong>。</p>
<p>对应上述的例子，就是 <code>x</code> 在数组第一位，和 <code>x</code> 在数组最后一位或者不在数组中的情况。</p>
<h4 id="平均时间复杂度">平均时间复杂度</h4>
<p>很明显，最理想和最不理想的情况发生的概率都很低，这样评估复杂度的话，不够准确。为了更准确的评估这种情况下的时间复杂度，我们就需要另一个概念：平均时间复杂度。</p>
<p>还是上面那个例子，<code>x</code> 在数组中位置的可能性有 $n+1$ 种情况，分别是在数组中的任意位置和不在数组中。我们把每种情况下需要执行的次数加起来，再除以 $n+1$ 就可以得到平均情况下的时间复杂度：$$\frac{1+2+3+\cdots+n+n}{n+1}$$</p>
<p>我们把这个式子稍微简化一下，我们知道 $1+2+3+\cdots+n=\frac{n(n+1)}{2}$（推导过程可以看<a href="https://zhuanlan.zhihu.com/p/88704434" target="_blank" rel="noopener noreffer ">这里</a>）所以：$$\frac{1+2+\cdots n+n}{n+1}=\frac{n(n+1)/2+n}{n+1}=\frac{n(n+3)}{2(n+1)}$$</p>
<p>忽略常量和系数之后可以看出，这是个线性阶的时间复杂度（看不出来的话带入几个数算算也行），也就是 $O(n)$，这个就是平均时间复杂度。</p>
<p>但是这样计算平均时间复杂度，还是不够准确，因为每种情况出现的概率并不一样。首先从大方向上看， <code>X</code> 只能是在或不在数组中，这两种情况准确的概率统计起来并不容易。为了方便理解，我们将其概率分别假设为 <code>1/2</code> ，同时，<code>x</code> 在数组中不同位置出现的概率也分别为 <code>1/n</code>，所以，根据概率乘法法则，<code>x</code> 出现在数组中各个不同位置的概率为：$$\frac{1}{2}\star\frac{1}{n}=\frac{1}{2n}$$</p>
<p>然后，我们再将各种情况的概率因素考虑进去，平均时间复杂度的计算就变成了：$$1*\frac{1}{2n}+2*\frac{1}{2n}+\cdots+n*\frac{1}{2n}+n*\frac{1}{2}=\frac{3n+1}{4}$$
这个值就是概率论中的加权平均值，也叫做<strong>期望值</strong>，所以更准确的平均时间复杂度，应该叫做<strong>加权平均时间复杂度</strong>，或者<strong>期望时间复杂度</strong>。</p>
<p>$\frac{3n+1}{4}$去掉常量和系数之后，用大O表达式描述，加上概率之后的平均复杂度还是 $O(n)$，有时简单平均和加权平均复杂度是一样的，也有时会不一样。</p>
<p>平均时间复杂度的计算方式确实有些复杂，但是平时使用得其实并不多，多数情况下使用单一复杂度评估即可。</p>
<h4 id="均摊时间复杂度">均摊时间复杂度</h4>
<p>上文提到，只有在一些特殊情况下才需要使用平均时间复杂度去评估程序，而均摊时间复杂度更加特殊，使用到的情况更少。如下代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// array表示一个长度为n的数组 
</span></span></span><span class="line"><span class="cl"><span class="c1">// 代码中的array.length就等于n 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span> 
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">			<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> 
</span></span><span class="line"><span class="cl">		<span class="o">}</span> 
</span></span><span class="line"><span class="cl">		<span class="n">array</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="n">count</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span> 
</span></span><span class="line"><span class="cl">	<span class="n">array</span><span class="o">[</span><span class="n">count</span><span class="o">]</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">++</span><span class="n">count</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 <code>count == array.length</code> 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 <code>sum</code> 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p>
<p>我们分析下这段代码的最好、最坏和平均时间复杂度。</p>
<p>最好的情况就是数组刚好有空闲，于是直接插入即可，时间复杂度是 $O(1)$，最坏的情况就是刚好  <code>count == array.length</code> ，这个时候需要遍历整个数组，时间复杂度是 $O(n)$</p>
<p>然后我们再来分析一下期望时间复杂度，这里一共有 <code>n+1</code> 种情况，其中有空位的种情况有 n 种的，没有空位的情况有一种，而且每种情况出现的概率都是 <code>n+1</code>，因此，期望时间复杂度为：
$$1*\frac{1}{n+1}+1*\frac{1}{n+1}+\cdots+1*\frac{1}{n+1}+n*\frac{1}{n+1}=\frac{2n}{n+1}$$
省略系数和常量之后，就是 $O(1)$</p>
<p>但是这个例子中分析平均时间复杂度，其实并不需要这么复杂的计算，为什呢？</p>
<p>我们对比一下这两个例子，会发现两个很大的区别：</p>
<ol>
<li><code>find()</code> 函数中，只有在极少数最理想的情况下，时间复杂度才会是 $O(1)$，而大部分情况下时间复杂度都是 $O(n)$，但是 <code>insert()</code> 函数很不一样，在大部分情况下，时间复杂度都是 $O(1)$，只有在极少数的最不理想情况下，时间复杂度才会是 $O(n)$</li>
<li><code>insert()</code> 函数中 $O(n)$ 操作和 $O(1)$ 操作有很强的规律性和顺序性：每一次 $O(n)$ 的插入操作之后，紧接着 $n-1$ 次的 $O(1)$ 插入操作，如此循环</li>
</ol>
<p>针对这种更加特殊的情况，我们还有一种更加方法的分析方法：<strong>摊还分析法</strong>，通过这种方法分析得出的时间复杂度我们称之为：<strong>摊还时间复杂度</strong>。</p>
<p>这种分析方法的核心思路是 <strong>分组</strong>。</p>
<p>我们看这个例子，每一次 $O(n)$ 复杂度的插入操作之后，紧接着 $n-1$ 次 $O(1)$ 复杂度的插入操作，那么我们把这 n 次操作分成一组，将第一次 $O(n)$ 耗时多的操作中消耗的时间，均摊到后面 $n-1$ 耗时少的操作中，这样一组连续操作下来均摊的时间复杂度就是 $O(1)$。这就是摊还分析方法的大致思路。</p>
<p>总结一下就是，在一个程序中，大部分时候时间复杂度都很低，只有极少数时候时间复杂度比较高，而且这些操作之间存在很强的顺序关系，这个时候就可以把这个程序的操作进行分组，将耗时多的情况下多消耗的时间，均摊到耗时少的情况中去，这样就能更快的得到这个程序的时间复杂度。</p>
<p>从这个例子中，我们也能看出来，<strong>在能够使用摊还分析方法的场景中，一般均摊时间复杂度就等于最好时间复杂度</strong>。</p>
<p>通过上述平均时间复杂度和均摊时间复杂度的两个例子，我们能看出来，平均时间复杂度是分析程序时间复杂度的一种特殊情况，而均摊时间复杂度又是平均时间复杂度的一种特殊情况，因此，会用到均摊时间复杂度的场合就更少了。所以，我们重点是要知道这种分析思路，并不用花太多精力在去区分和记忆。</p>
<p>上文花了很长的篇幅讲了时间复杂度分析，理解了这些内容，下面我们再来分析空间复杂度，就简单很多了。</p>
<h2 id="空间复杂度分析">空间复杂度分析</h2>
<p>分析空间复杂度和分析时间复杂度的框架是一致的，都是使用大 O 表达式，也都是表示数据规模与复杂度之间的趋势关系。那么，类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法消耗的存储空间与数据规模之间的增长关系</strong>。</p>
<p>空间复杂度分析相较于时间复杂度分析，要简单很多。看下面这个例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()*</span><span class="n">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这段代码是将一个长度为 n 的数组用 100 以内的随机数填满，然后再遍历输出。</p>
<p>在空间使用方面，除了第二行申请了一个长度为 n 的数组 array，其他操作均没有涉及，因此这段代码的空间复杂度和 n 的大小成正比，也就是 $O(n)$</p>
<p>常用的空间复杂度比常用的时间复杂度也少很多，一般就是 $O(1)$、 $O(n)$、 $O(n^2)$ 这三种。如果碰到特殊情况，使用分析时间复杂度的思路去分析即可。</p>
<blockquote>
<p>本文主要参考<a href="https://time.geekbang.org/column/intro/100017301" target="_blank" rel="noopener noreffer ">《数据结构与算法之美》</a>和维基百科。</p>
</blockquote>
]]></description>
</item>
<item>
    <title>Redis 分布式高可用终极指南</title>
    <link>https://asimov.top/the-ultimate-guide-to-redis-distributed-high-availability/</link>
    <pubDate>Tue, 20 Oct 2020 22:19:32 &#43;0800</pubDate>
    <author>asimov</author>
    <guid>https://asimov.top/the-ultimate-guide-to-redis-distributed-high-availability/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://www.mortensi.com/wp-content/uploads/2021/12/OSS-Cluster-background.png" referrerpolicy="no-referrer">
            </div><p>最近项目上需要用到 redis 高可用方案，遂上网找了一些资料学习，但是网上关于 redis 高可用的几种实现方式或口径不一，或含糊不清，或缺斤少两。经历了多方资料学习和实际验证，本文试图将 redis 分布式和集群方案从概念理解到技术选型到搭建使的整个过程用最简单的语言讲述清楚。</p>
<h2 id="分布式与集群">分布式与集群</h2>
<p>下文会涉及到大量的分布式和集群术语，这里我们先来复习一下集群和分布式的概念，加深一下理解。</p>
<p>目前的项目很少会采用单机架构了，一是因为单机性能有限，二是因为单机服务一旦故障整个系统就无法继续提供服务了。所以目前集群和分布式的架构使用得很广泛，主要就是为了解决上述两个问题，一个性能问题，一个故障问题，<strong>通过分布式架构解决性能（高并发）问题，通过集群架构解决故障服务（高可用）问题。</strong></p>
<h3 id="分布式架构">分布式架构</h3>
<blockquote>
<p>分布式：一个业务分拆多个子业务，部署在不同的服务器上</p>
</blockquote>
<p>网上很多文章把分布式架构说得很复杂，但都没有切中关键，其实理解起来很简单，所有的计算机系统都是为业务服务的，将同一个业务拆分成多个子业务，各个子业务部署在不同的服务器上，这就是分布式架构，通过将业务拆细，为不同的子业务配置不同性能的服务器，提高整个系统的性能。<em>我个人认为目前很火的微服务概念其实本质上就是分布式。</em></p>
<p>按照类型大致可以分为两种：<strong>分布式计算</strong>和<strong>分布式存储</strong>。</p>
<p>分布式计算很好理解，就是将大量计算任务分配到多个计算单元上以提高总计算性能。例如暴力破解某个密码需要遍历某个字符组合10万次，假设一台计算机需要10分钟，那么10台计算机同时遍历，每台遍历1万次，最后将结果汇总，那么就只需要1分钟。这10台计算机组合起来就是一个分布式计算系统，这里的业务就是计算。</p>
<p>同理，分布式储存也很好理解，就是将大量数据分配到多个储存单元上以提高总存储量。例如100ZB的数据一个储存单元放不下，那就拆成100份，每个储存单元存1份，那么这100个存储单元组合起来就是一个分布式储存系统，这里的业务就是存储。目前主流的关系型数据库都有比较成熟的分布式存储方案，如 MySQL 的 MySQL Fabric、MyCat 等，Oracle Database 有Oracle Sharding 等。Redis 作为流行的非关系型数据库，由于是内存数据库，理论上一般不会在 Redis 中存放太多的数据，但是在某些特殊情况下还是会有储存空间不够的情况，或者需要预防储存空间不够的情况发生，这个时候就需要 Redis 分布式架构了。</p>
<p>例如某集团下有很多的子公司，每个子公司都有多套 IT 系统，其中很多 IT 系统都是需要使用 Redis 的，集团为了统一管理，搭建了一套中央 Redis 系统，要求所有子公司下的 IT 系统统一使用集团的中央 Redis 库，这个时候即使当前储存容量够用，但是为了应对后期发展就必须使用到分布式储存，因为分布式架构理论上都支持无限水平拓展。</p>
<h3 id="集群架构">集群架构</h3>
<blockquote>
<p>集群：同一个业务，部署在多个服务器上</p>
</blockquote>
<p>集群同样也非常好理解，就是在多个服务器上部署同一个业务，这样可以起到两个作用：</p>
<ol>
<li>分散每台服务器的压力</li>
<li>任意一台或者几台服务器宕机也不会影响整个系统</li>
</ol>
<p>例如一个典型的 Web 集群服务架构图如下：</p>
<p></p>
<p>这里三个 Web Server 服务器实际上都是运行着同一套业务，但是三台服务器就可以显著分散单台服务器压力，并且任意一台宕机也不会导致无法提供服务。</p>
<h3 id="分布式与集群的关系">分布式与集群的关系</h3>
<p>分布式和集群区别很好理解，用下面一张图表示：</p>
<p></p>
<p><strong>需要注意的是分布式不一定能用上，但是集群一般都是需要的。因为不是所有系统都需要应对高并发场景，但高可用是一个系统能够长期稳定运行基本保障。因此用到分布式架构的系统基本上都会用到集群，而用集群架构的系统却不一定会用到分布式。</strong></p>
<h2 id="redis-部署指南">Redis 部署指南</h2>
<h3 id="单节点方案redis-standalone">单节点方案：Redis Standalone</h3>
<h4 id="原理简介">原理简介</h4>
<p>这是最简单的 redis 部署方案，所有数据存储和读写操作都在同一个 redis 服务上。</p>
<p>这种方式优点很明显：部署简单，无论是部署成本还是运维成本都很低，本地测试时最常见也是最方便的方式。</p>
<p>但同时缺点也很明显：不能实现高可用，也不能应对高并发场景，也无法轻易水平拓展，数据储存量很容易见顶。</p>
<h4 id="部署实例">部署实例</h4>
<p>单节点模式的部署是最简单的，一下是 Linux 系统下部署单节点 redis 的方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 下载 Redis 二进制安装包：</span>
</span></span><span class="line"><span class="cl">wget http://download.redis.io/releases/redis-5.0.4.tar.gz
</span></span><span class="line"><span class="cl"><span class="c1"># 解压二进制包</span>
</span></span><span class="line"><span class="cl">tar –zxvf redis-5.0.4.tar.gz
</span></span><span class="line"><span class="cl"><span class="c1"># 进入解压文件夹并编译二进制文件</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> redis-5.0.4
</span></span><span class="line"><span class="cl">make
</span></span><span class="line"><span class="cl"><span class="c1"># 安装</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> src
</span></span><span class="line"><span class="cl">make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">make install
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 make install 和 make test 的时候可能会遇到下面这个问题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">You need tcl 8.5 or newer in order to run the Redis <span class="nb">test</span>
</span></span><span class="line"><span class="cl">make: *** <span class="o">[</span>test<span class="o">]</span> Error <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这是因为系统中的 TCL 语言版本太低，TCL 语言是一种工具脚本语言，在安装 Redis 的过程中 make test 命令需要用到这个脚本语言，这个时候我们需要升级一下系统中的 TCL 版本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 下载一个高于 8.5 版本的 TCL 安装包，比如 8.6.8</span>
</span></span><span class="line"><span class="cl">wget http://downloads.sourceforge.net/tcl/tcl8.6.8-src.tar.gz
</span></span><span class="line"><span class="cl"><span class="c1"># 解压</span>
</span></span><span class="line"><span class="cl">tar -zxvf tcl8.6.8-src.tar.gz  -C /usr/local/  
</span></span><span class="line"><span class="cl"><span class="c1"># 切换到解压后的源码目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span>  /usr/local/tcl8.6.8/unix/
</span></span><span class="line"><span class="cl"><span class="c1"># 编译和安装</span>
</span></span><span class="line"><span class="cl">sudo ./configure  
</span></span><span class="line"><span class="cl">sudo make  
</span></span><span class="line"><span class="cl">sudo make install
</span></span></code></pre></td></tr></table>
</div>
</div><p>升级 TCL 到 8.5 版本以后，继续执行之前报错的语句，完成 Redis 的安装，安装完成后用 <code>redis-server -v</code> 验证安装是否成功，若成功输出如下版本信息则代表安装成功：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Redis server <span class="nv">v</span><span class="o">=</span>5.0.4
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装成功就可以直接运行了，但是默认配置下是不支持后台运行的，观点命令窗口就会结束 redis 进程，这显然是不行的。所以我们再简单改一下 redis 的配置，让其能够直接后台运行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 进入到 redis 的安装目录，编辑 redis.conf</span>
</span></span><span class="line"><span class="cl">vim /usr/redis/redis-5.0.4/redis.conf
</span></span><span class="line"><span class="cl"><span class="c1"># 将 daemonize no 修改成 daemonize yes （使 redis 服务可以在后台运行）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在指定配置下运行redis服务</span>
</span></span><span class="line"><span class="cl">/usr/local/bin/redis-server /usr/redis/redis-5.0.4/redis.conf 
</span></span><span class="line"><span class="cl"><span class="c1"># 查看redis运行情况</span>
</span></span><span class="line"><span class="cl">ps -ef <span class="p">|</span> grep redis
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出</span>
</span></span><span class="line"><span class="cl">app	  <span class="m">21794</span>   <span class="m">1</span>  <span class="m">0</span> Jan28 ?  03:31:25 ./redis-server *:6379
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到 redis 在默认的 6379 端口下运行，配置文件中还有一些可以调整的地方，这里就不一一列举了。</p>
<p>那么单节点模式 redis 服务就部署完成了</p>
<h3 id="redis-高可用方案redis-sentinel">Redis 高可用方案：Redis Sentinel</h3>
<h4 id="原理简介-1">原理简介</h4>
<p><strong>Redis Sentinel 是 Redis 官方推荐的高可用性(HA)解决方案，这是生产环境中最实用也是最常用的方案。</strong></p>
<p>这里涉及到另一个概念：master-slaver（主从模式）。很好理解，就是常用的主备模式，例如 nginx 的主备模式。一个主 redis 节点可以配置多个从节点，当主节点挂掉时，从节点自动顶上代替主节点，这样就可以有效的避免一个节点挂掉导致整个系统挂掉的问题，实现 redis 服务的高可用。如下图：</p>
<p></p>
<p>但是这个方案需要解决两个基本问题：</p>
<ol>
<li>如何提前判断各个节点（尤其是主节点）的运行健康状况？</li>
<li>当主节点宕机的时候如何从多个从节点中选出一个作为新的主节点并实现自动切换？</li>
</ol>
<p>这时 Redis Sentinel 应运而生，它主要有以下三个特点：</p>
<ul>
<li><strong>监控（Monitoring</strong>）：Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</li>
<li><strong>提醒（Notification）</strong>：当被监控的某个 Redis 服务器出现问题时，Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li>
<li><strong>自动故障迁移（Automatic failover）</strong>：当一个主服务器不能正常工作时，Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器，并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址，使得集群可以使用新主服务器代替失效服务器。</li>
</ul>
<p>总结来说就是 sentinel 可以监控一个或者多个 master-slaver 集群，定时对每个节点进行健康检查，可以通过 API 发送通知，并自动进行故障转移。这时r redis 结构就变成了</p>
<p><strong>使用了 redis sentinel 之后客户端不再直接连接 redis 节点获取服务，而是使用 sentinel 代理获取 redis 服务</strong>，类似 Nginx 的代理模式。那么这里又有一个新问题，就是<strong>如果 sentinel 宕机了，那么客户端就找不到 redis 服务了，所以 sentinel 本身也是需要支持高可用。</strong></p>
<p>**好在sentinel 本身也支持集群部署，并且各个 sentinel 之间支持自动监控，如此一来 redis 主从服务和 sentinel 服务都可以支持高可用。**预期结构如下：</p>
<p></p>
<h4 id="部署实例-1">部署实例</h4>
<h5 id="master-slaver-一主二从">master-slaver 一主二从</h5>
<p>那么下面我们就来实操一下，以下过程大部分参考 redis 官方 <a href="https://redis.io/topics/sentinel#redis-sentinel-documentation" target="_blank" rel="noopener noreffer ">Redis Sentinel 文档</a>。</p>
<p>安装 redis 就不重复了，和单机 redis 一样。</p>
<p>redis 解压后，redis home 目录下有 redis 配置的样例文件，我们不直接在此文件上就行修改，在redis home目录下新建文件夹 master-slave ，将配置文件都放于此目录下，下面是三个 redis 节点配置的关键部分</p>
<ul>
<li>master 配置文件：redis-6379.conf</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">port <span class="m">6379</span>
</span></span><span class="line"><span class="cl">daemonize yes
</span></span><span class="line"><span class="cl">logfile <span class="s2">&#34;6379.log&#34;</span>
</span></span><span class="line"><span class="cl">dbfilename <span class="s2">&#34;dump-6379.rdb&#34;</span>
</span></span><span class="line"><span class="cl">dir <span class="s2">&#34;/opt/soft/redis/data&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>slave-1 配置文件：redis-6380.conf</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">port <span class="m">6380</span>
</span></span><span class="line"><span class="cl">daemonize yes
</span></span><span class="line"><span class="cl">logfile <span class="s2">&#34;6380.log&#34;</span>
</span></span><span class="line"><span class="cl">dbfilename <span class="s2">&#34;dump-6380.rdb&#34;</span>
</span></span><span class="line"><span class="cl">dir <span class="s2">&#34;/opt/soft/redis/data&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 关键配置：将这个 redis 指定为某个第一个 redis 的 slaver</span>
</span></span><span class="line"><span class="cl">slaveof 127.0.0.1 <span class="m">6379</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>slave-2 配置文件：redis-6381.conf</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">port <span class="m">6381</span>
</span></span><span class="line"><span class="cl">daemonize yes
</span></span><span class="line"><span class="cl">logfile <span class="s2">&#34;6381.log&#34;</span>
</span></span><span class="line"><span class="cl">dbfilename <span class="s2">&#34;dump-6381.rdb&#34;</span>
</span></span><span class="line"><span class="cl">dir <span class="s2">&#34;/opt/soft/redis/data&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 关键配置：将这个 redis 指定为某个第一个 redis 的 slaver</span>
</span></span><span class="line"><span class="cl">slaveof 127.0.0.1 <span class="m">6379</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>分别启动这三个 redis 服务，启动过程就不罗嗦了，和分别启动三个单机 redis 是一样的，分别指定三个配置文件即可。启动后如下图所示：</p>
<p></p>
<p>6379、6380、6381 端口分别在运行一个 redis-server。</p>
<p>接下来查看这三个 redis-server 之间的关系：连接到主 redis 上用 <code>info replication</code>即可查看</p>
<p></p>
<p>可以看到当前连接的 redis 服务为 master 角色，下面有两个 slaver，IP 和端口都能看到。</p>
<p><strong>这样我们就顺利的完成了 一主二从 redis 环境的搭建，下面开始搭建 sentinel 集群。</strong></p>
<h5 id="sentinel-集群">sentinel 集群</h5>
<p>sentinel 本质上是一个特殊的 redis，大部分配置和普通的 redis 没有什么区别，主要区别在于端口和其哨兵监控设置，下面是三个典型的 sentinel 配置文件中的关键内容：</p>
<ul>
<li>sentinel-26379.conf</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#设置 sentinel 工作端口</span>
</span></span><span class="line"><span class="cl">port <span class="m">26379</span>
</span></span><span class="line"><span class="cl"><span class="c1">#后台运行 </span>
</span></span><span class="line"><span class="cl">daemonize yes
</span></span><span class="line"><span class="cl"><span class="c1">#日志文件名称</span>
</span></span><span class="line"><span class="cl">logfile <span class="s2">&#34;26379.log&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置当前 sentinel 监控的 redis ip 和 端口</span>
</span></span><span class="line"><span class="cl">sentinel monitor mymaster 127.0.0.1 <span class="m">6379</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置判断 redis 节点宕机时间</span>
</span></span><span class="line"><span class="cl">sentinel down-after-milliseconds mymaster <span class="m">60000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置自动故障转移超时</span>
</span></span><span class="line"><span class="cl">sentinel failover-timeout mymaster <span class="m">180000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置同时故障转移个数</span>
</span></span><span class="line"><span class="cl">sentinel parallel-syncs mymaster <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>sentinel-26380.conf</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#设置 sentinel 工作端口</span>
</span></span><span class="line"><span class="cl">port <span class="m">26380</span>
</span></span><span class="line"><span class="cl"><span class="c1">#后台运行 </span>
</span></span><span class="line"><span class="cl">daemonize yes
</span></span><span class="line"><span class="cl"><span class="c1">#日志文件名称</span>
</span></span><span class="line"><span class="cl">logfile <span class="s2">&#34;26380.log&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置当前 sentinel 监控的 redis ip 和 端口</span>
</span></span><span class="line"><span class="cl">sentinel monitor mymaster 127.0.0.1 <span class="m">6379</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置判断 redis 节点宕机时间</span>
</span></span><span class="line"><span class="cl">sentinel down-after-milliseconds mymaster <span class="m">60000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置自动故障转移超时</span>
</span></span><span class="line"><span class="cl">sentinel failover-timeout mymaster <span class="m">180000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置同时故障转移个数</span>
</span></span><span class="line"><span class="cl">sentinel parallel-syncs mymaster <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>sentinel-26381.conf</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#设置 sentinel 工作端口</span>
</span></span><span class="line"><span class="cl">port <span class="m">26391</span>
</span></span><span class="line"><span class="cl"><span class="c1">#后台运行 </span>
</span></span><span class="line"><span class="cl">daemonize yes
</span></span><span class="line"><span class="cl"><span class="c1">#日志文件名称</span>
</span></span><span class="line"><span class="cl">logfile <span class="s2">&#34;26381.log&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置当前 sentinel 监控的 redis ip 和 端口</span>
</span></span><span class="line"><span class="cl">sentinel monitor mymaster 127.0.0.1 <span class="m">6379</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置判断 redis 节点宕机时间</span>
</span></span><span class="line"><span class="cl">sentinel down-after-milliseconds mymaster <span class="m">60000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置自动故障转移超时</span>
</span></span><span class="line"><span class="cl">sentinel failover-timeout mymaster <span class="m">180000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#设置同时故障转移个数</span>
</span></span><span class="line"><span class="cl">sentinel parallel-syncs mymaster <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对几个监控设置的配置做一下详细说明：</p>
<ul>
<li><strong>sentinel monitor [master-group-name] [ip] [port] [quorum]</strong></li>
</ul>
<p>这个命令中【master-group-name】是 master redis 的名称；【ip】和【port】分别是其 ip 和端口，很好理解。最后一个参数【quorum】是”投票数“</p>
<p>举个栗子，redis 集群中有3个 sentinel 实例，其中 master 挂掉了，如果这里的票数是2，表示有2个 sentinel 认为 master 挂掉啦，才能被认为是正真的挂掉啦。其中 sentinel 集群中各个 sentinel 之间通过 gossip 协议互相通信。
具体怎样投票还涉及到 redis 集群中的【主观下线】和【客观下线】的概念，后面再详细介绍。</p>
<ul>
<li><strong>down-after-milliseconds</strong></li>
</ul>
<p>sentinel 会向 master 发送心跳 PING 来确认 master 是否存活，如果 master 在“一定时间范围”内不回应PONG 或者是回复了一个错误消息，那么这个 sentinel 会主观地认为这个 master 已经不可用了。而这个down-after-milliseconds 就是用来指定这个“一定时间范围”的，单位是毫秒。</p>
<ul>
<li><strong>failover-timeout</strong></li>
</ul>
<p>这个参数 redis 官方文档中并未做详细说明，但是很好理解，就是 sentinel 对 redis 节点进行自动故障转移的超时设置，当 failover（故障转移）开始后，在此时间内仍然没有触发任何 failover 操作，当前sentinel  将会认为此次故障转移失败。</p>
<ul>
<li><strong>parallel-syncs</strong></li>
</ul>
<p>当新master产生时，同时进行 slaveof 到新 master 并进行同步复制的 slave 个数,也就是同时几个 slave 进行同步。因为在 salve 执行 salveof 与新 master 同步时，将会终止客户端请求，因此这个值需要权衡。此值较大，意味着“集群”终止客户端请求的时间总和和较大，此值较小,意味着“集群”在故障转移期间，多个 salve 向客户端提供服务时仍然使用旧数据。</p>
<p>我们配置三个 sentinel 几点组成一个 sentinel 集群，端口分别是 23679，23680，23681</p>
<p>然后就可以启动 sentinel 集群了</p>
<p>启动 sentinel 有两种方式：</p>
<ol>
<li><code>redis-sentinel /path/to/sentinel.conf</code></li>
<li><code>redis-server /path/to/sentinel.conf --sentinel</code></li>
</ol>
<p>这两种启动方式没有区别，按照顺序分别启动三个 sentinel 节点之后，我们任意连接其中的一个 sentinel 节点查看集群关系，如下图：
</p>
<p>我们连接 26379 这个端口的 sentinel，用 <code>info sentinel</code>命令可以看到这个 sentinel 监控的 master redis 服务的 ip，端口，以及 maste 的 slaver 节点数量，以及 sentinel 的数量。</p>
<p>再连接 26380 这个节点试试：</p>
<p></p>
<p>可以看到结果和上面一样。</p>
<p><strong>如此，我们的 sentinel 集群也部署完成了</strong></p>
<p>那么，当前这个 redis sentinel 高可用集群的做种拓扑图如下：</p>
<p></p>
<h4 id="高可用故障测试">高可用故障测试</h4>
<p>下面我们来测试一下这个高可用方案的实际能力。</p>
<p>我们手动把一主二从中的主节点 kill 掉：</p>
<p></p>
<p>然后连接 6380 节点，查看集群状态：
</p>
<p>可以看到 6380 节点已经自动升级为了 master 节点，还有 6381 这一个 slaver 节点，<strong>自动故障转移成功</strong></p>
<p>我们再手动启动 6379 节点，观察集群状态：</p>
<p></p>
<p>如图，6379节点重新启动后，自动变成了 6380 节点的从节点。</p>
<p><strong>如此一套完整的 redis 高可用方案就部署完成了。</strong></p>
<h4 id="redis-主观下线和客观下线">Redis 主观下线和客观下线</h4>
<p>前面说过， Redis 的 Sentinel 中关于下线（down）有两个不同的概念：</p>
<ul>
<li>主观下线（Subjectively Down， 简称 SDOWN）指的是单个 Sentinel 实例对服务器做出的下线判断。</li>
<li>客观下线（Objectively Down， 简称 ODOWN）指的是多个 Sentinel 实例在对同一个服务器做出 SDOWN 判断， 并且通过 SENTINEL is-master-down-by-addr 命令互相交流之后， 得出的服务器下线判断。 （一个 Sentinel 可以通过向另一个 Sentinel 发送 SENTINEL is-master-down-by-addr 命令来询问对方是否认为给定的服务器已下线）</li>
</ul>
<p>如果一个服务器没有在 master-down-after-milliseconds 选项所指定的时间内， 对向它发送 PING 命令的 Sentinel 返回一个有效回复（valid reply）， 那么 Sentinel 就会将这个服务器标记为主观下线。</p>
<p>服务器对 PING 命令的有效回复可以是以下三种回复的其中一种：</p>
<ul>
<li>返回 +PONG 。</li>
<li>返回 -LOADING 错误。</li>
<li>返回 -MASTERDOWN 错误。</li>
</ul>
<p>如果服务器返回除以上三种回复之外的其他回复， 又或者在指定时间内没有回复 PING 命令， 那么 Sentinel 认为服务器返回的回复无效（non-valid）。</p>
<p>注意， 一个服务器必须在 master-down-after-milliseconds 毫秒内， 一直返回无效回复才会被 Sentinel 标记为主观下线。</p>
<p>举个栗子， 如果 master-down-after-milliseconds 选项的值为 30000 毫秒（30 秒）， 那么只要服务器能在每 29 秒之内返回至少一次有效回复， 这个服务器就仍然会被认为是处于正常状态的。</p>
<p>从主观下线状态切换到客观下线状态并没有使用严格的法定人数算法（strong quorum algorithm）， 而是使用了流言协议： 如果 Sentinel 在给定的时间范围内， 从其他 Sentinel 那里接收到了足够数量的主服务器下线报告， 那么 Sentinel 就会将主服务器的状态从主观下线改变为客观下线。 如果之后其他 Sentinel 不再报告主服务器已下线， 那么客观下线状态就会被移除。</p>
<p>有一点需要注意的是：客观下线条件<strong>只适用于主服务器</strong>： 对于任何其他类型的 Redis 实例， Sentinel 在将它们判断为下线前不需要进行协商， 所以从服务器或者其他 Sentinel 永远不会达到客观下线条件。</p>
<p>只要一个 Sentinel 发现某个主服务器进入了客观下线状态， 这个 Sentinel 就可能会被其他 Sentinel 推选出， 并对失效的主服务器执行自动故障迁移操作。</p>
<h3 id="redis-分布式高可用方案redis-cluster">Redis 分布式高可用方案：Redis Cluster</h3>
<h4 id="原理简介-2">原理简介</h4>
<p>作为一个内存数据库，实现高可用是一个基本保障，当储存服务在可预见的将来需要做存储拓展时，分布式储存就是一个必须要考虑到的事情。例如部署一个中央 redis 储存服务，提供给集团下所有的子公司所有需要的系统使用，并且系统数量在不断的增加，此时在部署服务的时候，分布式储存结构几乎是必然的选择。</p>
<p><strong>Redis 3.0 版本之前，可以通过前面说所的 Redis Sentinel（哨兵）来实现高可用 ( HA )，从 3.0 版本之后，官方推出了Redis Cluster，它的主要用途是实现数据分片(Data Sharding)，同时提供了完整的 sharding、replication（复制机制仍使用原有机制，并且具备感知主备的能力）、failover 解决方案，称为 Redis Cluster，同样可以实现 HA，是官方当前推荐的方案。</strong></p>
<p>在 Redis Sentinel 模式中，每个节点需要保存全量数据，冗余比较多，而在Redis Cluster 模式中，每个分片只需要保存一部分的数据，对于内存数据库来说，还是要尽量的减少冗余。在数据量太大的情况下，故障恢复需要较长时间，另外，内存的价格也是非常高昂的。</p>
<p>Redis Cluste r的具体实现细节是采用了 Hash 槽的概念，集群会预先分配16384个槽（<strong>slot</strong>），并将这些槽分配给具体的服务节点，通过对 Key 进行 CRC16(key)%16384 运算得到对应的槽是哪一个，从而将读写操作转发到该槽所对应的服务节点。当有新的节点加入或者移除的时候，再来迁移这些槽以及其对应的数据。在这种设计之下，我们就可以很方便的进行动态扩容或缩容。</p>
<p>当然，关于高可用的实现方案，也可以将 Redis-Sentinel 和 Redis-Cluster 两种模式结合起来使用，不过比较复杂，并不太推荐。</p>
<p>下图展示了 Redis Cluster 分配 key 和 slot 的基本原理：</p>
<p></p>
<p>一个典型的 Redis Cluster 分布式集群由多个Redis节点组成。不同的节点组服务的数据无交集，每个节点对应数据 sharding 的一个分片。节点组内部分为主备 2 类，对应前面叙述的 master 和 slave。两者数据准实时一致，通过异步化的主备复制机制保证。一个节点组有且仅有一个 master，同时有0到多个 slave。<strong>只有 master 对外提供写服务，读服务可由 master/slave 提供</strong>。如下所示：</p>
<p></p>
<p>上图中，key-value 全集被分成了 5 份，5个 slot（实际上Redis Cluster有 16384 [0-16383] 个slot，每个节点服务一段区间的slot，这里面仅仅举例）。A和B为master节点，对外提供写服务。分别负责 1/2/3 和 4/5 的slot。A/A1 和B/B1/B2 之间通过主备复制的方式同步数据。</p>
<p>上述的5个节点，两两通过 Redis Cluster Bus 交互，相互交换如下的信息：</p>
<p>1、数据分片（slot）和节点的对应关系；</p>
<p>2、集群中每个节点可用状态；</p>
<p>3、集群结构发生变更时，通过一定的协议对配置信息达成一致。数据分片的迁移、主备切换、单点 master 的发现和其发生主备关系变更等，都会导致集群结构变化。</p>
<p>4、publish/subscribe（发布订阅）功能，在Cluster版内部实现所需要交互的信息。</p>
<p>Redis Cluster Bus 通过单独的端口进行连接，由于Bus是节点间的内部通信机制，交互的是字节序列化信息。相对 Client 的字符序列化来说，效率较高。</p>
<p>Redis Cluster是一个<strong>去中心化</strong>的分布式实现方案，客户端和集群中任一节点连接，然后通过后面的交互流程，逐渐的得到全局的数据分片映射关系。</p>
<p>更多更详细的 redis cluster 的说明请移步<a href="https://redis.io/topics/cluster-tutorial" target="_blank" rel="noopener noreffer ">Redis Cluster 官方文档</a></p>
<h4 id="部署实例-2">部署实例</h4>
<p>Redis Cluster 集群<strong>至少需要三个 master 节点</strong>，本文将以单机多实例的方式部署3个主节点及3个从节点，6个节点实例分别使用不同的端口及工作目录</p>
<p>安装 redis 同上，不赘述。</p>
<ol>
<li>为每个 redis 节点分别创建工作目录</li>
</ol>
<p>在redis安装目录 /usr/local/redis-5.0.2 下新建目录 redis-cluster，并在该目录下再新建6个子目录，7000,7001,8000,8001,9000,9001，此时目录结构如下图所示：</p>
<p></p>
<ol start="2">
<li>修改配置</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#开启后台运行</span>
</span></span><span class="line"><span class="cl">daemonize yes
</span></span><span class="line"><span class="cl"><span class="c1">#工作端口</span>
</span></span><span class="line"><span class="cl">port <span class="m">7000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1</span>
</span></span><span class="line"><span class="cl"><span class="nb">bind</span> 172.27.0.8  
</span></span><span class="line"><span class="cl"><span class="c1">#指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录</span>
</span></span><span class="line"><span class="cl">dir /usr/local/redis-cluster/7000/
</span></span><span class="line"><span class="cl"><span class="c1">#启用集群模式</span>
</span></span><span class="line"><span class="cl">cluster-enabled yes 
</span></span><span class="line"><span class="cl"><span class="c1">#生成的集群配置文件名称，集群搭建成功后会自动生成，在工作目录下</span>
</span></span><span class="line"><span class="cl">cluster-config-file nodes-7000.conf 
</span></span><span class="line"><span class="cl"><span class="c1">#节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间</span>
</span></span><span class="line"><span class="cl">cluster-node-timeout <span class="m">5000</span> 
</span></span><span class="line"><span class="cl"><span class="c1">#开启AOF模式</span>
</span></span><span class="line"><span class="cl">appendonly yes 
</span></span><span class="line"><span class="cl"><span class="c1">#pid file所在目录</span>
</span></span><span class="line"><span class="cl">pidfile /var/run/redis_8001.pid 
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>
<p>按照上面的样例将配置文件复制到另外5个目录下，并对 port、dir、cluster-config-file 三个属性做对应修改，这里就不一一列举了。</p>
</li>
<li>
<p>安装 Ruby 和 RubyGems</p>
</li>
</ol>
<p>由于创建 redis cluster 需要用到 redis-trib 命令，而这个命令依赖 Ruby 和 RubyGems，因此需要安装一下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-cluster<span class="o">]</span><span class="c1"># yum install ruby</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-cluster<span class="o">]</span><span class="c1"># yum install rubygems</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-cluster<span class="o">]</span><span class="c1"># gem install redis --version 3.3.3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>分别启动6个节点</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-4.0.6<span class="o">]</span><span class="c1"># ./src/redis-server redis-cluster/7000/redis.conf</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-4.0.6<span class="o">]</span><span class="c1"># ./src/redis-server redis-cluster/7001/redis.conf</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-4.0.6<span class="o">]</span><span class="c1"># ./src/redis-server redis-cluster/8000/redis.conf</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-4.0.6<span class="o">]</span><span class="c1"># ./src/redis-server redis-cluster/8001/redis.conf</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-4.0.6<span class="o">]</span><span class="c1"># ./src/redis-server redis-cluster/9000/redis.conf</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-4.0.6<span class="o">]</span><span class="c1"># ./src/redis-server redis-cluster/9001/redis.conf</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>查看服务运行状态</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@VM_0_15_centos redis-4.0.6<span class="o">]</span><span class="c1"># ps -ef | grep redis</span>
</span></span><span class="line"><span class="cl">root     <span class="m">20290</span>     <span class="m">1</span>  <span class="m">0</span> 18:33 ?        00:00:02 ./src/redis-server *:8001 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root     <span class="m">20295</span>     <span class="m">1</span>  <span class="m">0</span> 18:33 ?        00:00:02 ./src/redis-server *:8002 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root     <span class="m">20300</span>     <span class="m">1</span>  <span class="m">0</span> 18:33 ?        00:00:02 ./src/redis-server *:8003 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root     <span class="m">20305</span>     <span class="m">1</span>  <span class="m">0</span> 18:33 ?        00:00:02 ./src/redis-server *:8004 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root     <span class="m">20310</span>     <span class="m">1</span>  <span class="m">0</span> 18:33 ?        00:00:02 ./src/redis-server *:8005 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root     <span class="m">20312</span>     <span class="m">1</span>  <span class="m">0</span> 18:33 ?        00:00:02 ./src/redis-server *:8006 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root     <span class="m">22913</span> <span class="m">15679</span>  <span class="m">0</span> 19:31 pts/2    00:00:00 grep --color<span class="o">=</span>auto redis
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到6个节点以及全部成功启动</p>
<ol start="7">
<li>创建 redis cluster</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[root@VM_0_15_centos redis-4.0.6]# ./src/redis-trib.rb create --replicas 1 172.27.0.8:7000 172.27.0.8:7001 172.27.0.8:8000 172.27.0.8:8001 172.27.0.8:9000 172.27.0.8:90001
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建过程中会有部分需要确认的地方，按照提示输入即可，集群创建完毕后观察一下这个集群的节点状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">172.27.0.8:7000&gt; cluster nodes
</span></span><span class="line"><span class="cl">068ac2afe1ade8b69b83226453fecc2b79cd93ae 172.27.0.8:7001@17001 slave 421ebe9e0a5ac6c811935ecd9dba83ef119dec17 <span class="m">0</span> <span class="m">1531008204920</span> <span class="m">4</span> connected
</span></span><span class="line"><span class="cl">784c727c83a5952d3714ac211021f909cc4dfee4 172.27.0.8:8001@18001 slave eb5d700e2f030c02fb1f30ba4420d0b4f7170d84 <span class="m">0</span> <span class="m">1531008203000</span> <span class="m">5</span> connected
</span></span><span class="line"><span class="cl">0537099e7cc7ab595c7aad5f0c96985251b85ec0 172.27.0.8:9001@19001 slave 79262341417df0a11eaf31e72bbf3e26f5f60ebf <span class="m">0</span> <span class="m">1531008204419</span> <span class="m">6</span> connected
</span></span><span class="line"><span class="cl">421ebe9e0a5ac6c811935ecd9dba83ef119dec17 172.27.0.8:7000@17000 myself,master - <span class="m">0</span> <span class="m">1531008204000</span> <span class="m">1</span> connected 0-5460
</span></span><span class="line"><span class="cl">eb5d700e2f030c02fb1f30ba4420d0b4f7170d84 172.27.0.8:8000@18000 master - <span class="m">0</span> <span class="m">1531008203000</span> <span class="m">2</span> connected 5461-10922
</span></span><span class="line"><span class="cl">79262341417df0a11eaf31e72bbf3e26f5f60ebf 172.27.0.8:9000@19000 master - <span class="m">0</span> <span class="m">1531008203419</span> <span class="m">3</span> connected 10923-16383
</span></span></code></pre></td></tr></table>
</div>
</div><p>如上所示，一个 3主3从的 redis cluster 分布式集群就搭建成功了，7000、8000、9000分别是三个 master 节点，7001、8001和9001为对应的 slaver 节点。</p>
<p>其实如果你并不想管这么多配置而只是想在最快的速度内创建一个 redis cluster 用作测试或者其他用途， redis 官方在 redis 安装目录的 Utils 目录下提供了一个 create-cluster 的脚本，如下图：</p>
<p></p>
<p>只要执行一下这个脚本就能自动创建一个 cluster：</p>
<p>[图片上传失败&hellip;(image-c6eea0-1554881540128)]</p>
<p>进入到这个目录下，执行<code>./create-cluster start</code>，即可立即完成一个 三主三从的 redis-cluster 的搭建：</p>
<p></p>
<p>如下图所示就是直接使用这个脚本创建的 redis cluster：</p>
<p></p>
<h4 id="tips">Tips</h4>
<ol>
<li>
<p>如果想重新创建集群，需要登录到每个节点，执行 flushdb，然后执行cluster reset，重启节点；</p>
</li>
<li>
<p>如果要批量杀掉Redis进程，可以使用 pkill redis-server命令；</p>
</li>
<li>
<p>如果redis开启了密码认证，则需要在redis.conf中增加属性 : masterauth yourpassword ，并且需要修改/usr/local/share/gems/gems/redis-3.3.3/lib/redis目录下的client.rb文件，将password属性设置为redis.conf中的requirepass的值，不同的操作系统client.rb的位置可能不一样，可以使用 find / -name &ldquo;client.rb&quot;全盘查找一下；</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> <span class="nv">DEFAULTS</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      :url <span class="o">=</span>&gt; lambda <span class="o">{</span> ENV<span class="o">[</span><span class="s2">&#34;REDIS_URL&#34;</span><span class="o">]</span> <span class="o">}</span>,
</span></span><span class="line"><span class="cl">      :scheme <span class="o">=</span>&gt; <span class="s2">&#34;redis&#34;</span>,
</span></span><span class="line"><span class="cl">      :host <span class="o">=</span>&gt; <span class="s2">&#34;127.0.0.1&#34;</span>,
</span></span><span class="line"><span class="cl">      :port <span class="o">=</span>&gt; 6379,
</span></span><span class="line"><span class="cl">      :path <span class="o">=</span>&gt; nil,
</span></span><span class="line"><span class="cl">      :timeout <span class="o">=</span>&gt; 5.0,
</span></span><span class="line"><span class="cl">      :password <span class="o">=</span>&gt; <span class="s2">&#34;yourpassword&#34;</span>,
</span></span><span class="line"><span class="cl">      :db <span class="o">=</span>&gt; 0,
</span></span><span class="line"><span class="cl">      :driver <span class="o">=</span>&gt; nil,
</span></span><span class="line"><span class="cl">      :id <span class="o">=</span>&gt; nil,
</span></span><span class="line"><span class="cl">      :tcp_keepalive <span class="o">=</span>&gt; 0,
</span></span><span class="line"><span class="cl">      :reconnect_attempts <span class="o">=</span>&gt; 1,
</span></span><span class="line"><span class="cl">      :inherit_socket <span class="o">=</span>&gt; <span class="nb">false</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>Redis开启密码认证后，在集群操作时问题会比较多，因此在非特殊情况下不建议开启密码认证，可以搭配使用防火墙保证 Redis 的安全。</li>
</ol>
<p>故障测试的方法与上面一样，故不赘述。</p>
<h3 id="总结">总结</h3>
<p>Redis 服务的部署方案的选型大家根据自己项目的需求部署即可，一般来说 redis sentinel 就够用了，也是目前用得最多的模式，但是 redis 3.0 之后官方推出的 redis-cluster 虽然本质是用于实现数据分片和分布式存储，但是其也实现了 redis sentinel 的全部功能，有完全的 HA 能力，并且部署起来更简单，因此成为了官方推荐的 HA 方案。我个人也更加推荐 redis cluster 方案。</p>]]></description>
</item>
</channel>
</rss>
